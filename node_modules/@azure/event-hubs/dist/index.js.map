{"version":3,"file":"index.js","sources":["../src/eventData.ts","../../../../common/temp/node_modules/.registry.npmjs.org/uuid/3.3.2/node_modules/uuid/lib/rng.js","../../../../common/temp/node_modules/.registry.npmjs.org/uuid/3.3.2/node_modules/uuid/lib/bytesToUuid.js","../../../../common/temp/node_modules/.registry.npmjs.org/uuid/3.3.2/node_modules/uuid/v4.js","../src/log.ts","../src/linkEntity.ts","../src/eventPosition.ts","../src/eventHubReceiver.ts","../src/streamingReceiver.ts","../src/util/constants.ts","../src/managementClient.ts","../src/connectionContext.ts","../src/eventHubSender.ts","../src/batchingReceiver.ts","../src/iothub/iothubClient.ts","../src/eventHubClient.ts","../src/index.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {\n  Message,\n  MessageProperties,\n  MessageHeader,\n  Dictionary,\n  messageHeader,\n  messageProperties,\n  MessageAnnotations,\n  DeliveryAnnotations\n} from \"rhea-promise\";\nimport { Constants } from \"@azure/amqp-common\";\n\n/**\n * Describes the delivery annotations.\n * @interface EventHubDeliveryAnnotations\n */\nexport interface EventHubDeliveryAnnotations extends DeliveryAnnotations {\n  /**\n   * @property {string} [last_enqueued_offset] The offset of the last event.\n   */\n  last_enqueued_offset?: string;\n  /**\n   * @property {number} [last_enqueued_sequence_number] The sequence number of the last event.\n   */\n  last_enqueued_sequence_number?: number;\n  /**\n   * @property {number} [last_enqueued_time_utc] The enqueued time of the last event.\n   */\n  last_enqueued_time_utc?: number;\n  /**\n   * @property {number} [runtime_info_retrieval_time_utc] The retrieval time of the last event.\n   */\n  runtime_info_retrieval_time_utc?: number;\n  /**\n   * @property {string} Any unknown delivery annotations.\n   */\n  [x: string]: any;\n}\n\n/**\n * Map containing message attributes that will be held in the message header.\n * @interface EventHubMessageAnnotations\n */\nexport interface EventHubMessageAnnotations extends MessageAnnotations {\n  /**\n   * @property {string | null} [x-opt-partition-key] Annotation for the partition key set for the event.\n   */\n  \"x-opt-partition-key\"?: string | null;\n  /**\n   * @property {number} [x-opt-sequence-number] Annontation for the sequence number of the event.\n   */\n  \"x-opt-sequence-number\"?: number;\n  /**\n   * @property {number} [x-opt-enqueued-time] Annotation for the enqueued time of the event.\n   */\n  \"x-opt-enqueued-time\"?: number;\n  /**\n   * @property {string} [x-opt-offset] Annotation for the offset of the event.\n   */\n  \"x-opt-offset\"?: string;\n  /**\n   * @property {any} Any other annotation that can be added to the message.\n   */\n  [x: string]: any;\n}\n\n/**\n * Describes the structure of an event to be sent or received from the EventHub.\n * @interface EventData\n */\nexport interface EventData {\n  /**\n   * @property {MessageHeader} [header] - The message headers.\n   */\n  header?: MessageHeader;\n  /**\n   * @property {any} body - The message body that needs to be sent or is received.\n   */\n  body: any;\n  /**\n   * @property {Date} [enqueuedTimeUtc] The enqueued time of the event.\n   */\n  enqueuedTimeUtc?: Date;\n  /**\n   * @property {string | null} [partitionKey] If specified EventHub will hash this to a partitionId.\n   * It guarantees that messages end up in a specific partition on the event hub.\n   */\n  partitionKey?: string | null;\n  /**\n   * @property {string} [offset] The offset of the event.\n   */\n  offset?: string;\n  /**\n   * @property {number} [sequenceNumber] The sequence number of the event.\n   */\n  sequenceNumber?: number;\n  /**\n   * @property {AmqpMessageAnnotations} [annotations] The amqp message attributes.\n   */\n  annotations?: EventHubMessageAnnotations;\n  /**\n   * @property {AmqpMessageProperties} [properties] The predefined AMQP properties like message_id, correlation_id, reply_to, etc.\n   */\n  properties?: MessageProperties;\n  /**\n   * @property {Dictionary<any>} [applicationProperties] The application specific properties.\n   */\n  applicationProperties?: Dictionary<any>;\n  /**\n   * @property {number} [lastSequenceNumber] The last sequence number of the event within the partition stream of the Event Hub.\n   */\n  lastSequenceNumber?: number;\n  /**\n   * @property {string} [lastEnqueuedOffset] The offset of the last enqueued event.\n   */\n  lastEnqueuedOffset?: string;\n  /**\n   * @property {Date} [lastEnqueuedTime] The enqueued UTC time of the last event.\n   */\n  lastEnqueuedTime?: Date;\n  /**\n   * @property {Date} [retrievalTime] The time when the runtime info was retrieved\n   */\n  retrievalTime?: Date;\n  /**\n   * @property {AmqpMessage} _raw_amqp_mesage The underlying raw amqp message.\n   */\n  _raw_amqp_mesage?: Message;\n}\n\n/**\n * Describes the methods on the EventData interface.\n * @module EventData\n */\nexport namespace EventData {\n  /**\n   * Converts the AMQP message to an EventData.\n   * @param {AmqpMessage} msg The AMQP message that needs to be converted to EventData.\n   */\n  export function fromAmqpMessage(msg: Message): EventData {\n    const data: EventData = {\n      body: msg.body,\n      _raw_amqp_mesage: msg\n    };\n    if (msg.message_annotations) {\n      data.annotations = msg.message_annotations;\n      if (msg.message_annotations[Constants.partitionKey] != undefined) {\n        data.partitionKey = msg.message_annotations[Constants.partitionKey];\n      }\n      if (msg.message_annotations[Constants.sequenceNumber] != undefined) {\n        data.sequenceNumber = msg.message_annotations[Constants.sequenceNumber];\n      }\n      if (msg.message_annotations[Constants.enqueuedTime] != undefined) {\n        data.enqueuedTimeUtc = new Date(msg.message_annotations[Constants.enqueuedTime] as number);\n      }\n      if (msg.message_annotations[Constants.offset] != undefined) {\n        data.offset = msg.message_annotations[Constants.offset];\n      }\n    }\n    // Since rhea expects message properties as top level properties we will look for them and unflatten them inside properties.\n    for (const prop of messageProperties) {\n      if ((msg as any)[prop] != undefined) {\n        if (!data.properties) {\n          data.properties = {};\n        }\n        (data.properties as any)[prop] = (msg as any)[prop];\n      }\n    }\n    // Since rhea expects message headers as top level properties we will look for them and unflatten them inside header.\n    for (const prop of messageHeader) {\n      if ((msg as any)[prop] != undefined) {\n        if (!data.header) {\n          data.header = {};\n        }\n        (data.header as any)[prop] = (msg as any)[prop];\n      }\n    }\n    if (msg.application_properties) {\n      data.applicationProperties = msg.application_properties;\n    }\n    if (msg.delivery_annotations) {\n      data.lastEnqueuedOffset = msg.delivery_annotations.last_enqueued_offset;\n      data.lastSequenceNumber = msg.delivery_annotations.last_enqueued_sequence_number;\n      data.lastEnqueuedTime = new Date(msg.delivery_annotations.last_enqueued_time_utc as number);\n      data.retrievalTime = new Date(msg.delivery_annotations.runtime_info_retrieval_time_utc as number);\n    }\n    return data;\n  }\n\n  /**\n   * Converts an EventData object to an AMQP message.\n   * @param {EventData} data The EventData object that needs to be converted to an AMQP message.\n   */\n  export function toAmqpMessage(data: EventData): Message {\n    const msg: Message = {\n      body: data.body\n    };\n    // As per the AMQP 1.0 spec If the message-annotations or delivery-annotations section is omitted,\n    // it is equivalent to a message-annotations section containing anempty map of annotations.\n    msg.message_annotations = {};\n    msg.delivery_annotations = {};\n    if (data.annotations) {\n      msg.message_annotations = data.annotations;\n    }\n    if (data.properties) {\n      // Set amqp message properties as top level properties, since rhea sends them as top level properties.\n      for (const prop in data.properties) {\n        (msg as any)[prop] = (data.properties as any)[prop];\n      }\n    }\n    if (data.applicationProperties) {\n      msg.application_properties = data.applicationProperties;\n    }\n    if (data.partitionKey != undefined) {\n      msg.message_annotations[Constants.partitionKey] = data.partitionKey;\n      // Event Hub service cannot route messages to a specific partition based on the partition key\n      // if AMQP message header is an empty object. Hence we make sure that header is always present\n      // with atleast one property. Setting durable to true, helps us achieve that.\n      msg.durable = true;\n    }\n    if (data.sequenceNumber != undefined) {\n      msg.message_annotations[Constants.sequenceNumber] = data.sequenceNumber;\n    }\n    if (data.enqueuedTimeUtc != undefined) {\n      msg.message_annotations[Constants.enqueuedTime] = data.enqueuedTimeUtc.getTime();\n    }\n    if (data.offset != undefined) {\n      msg.message_annotations[Constants.offset] = data.offset;\n    }\n    if (data.lastEnqueuedOffset != undefined) {\n      msg.delivery_annotations.last_enqueued_offset = data.lastEnqueuedOffset;\n    }\n    if (data.lastSequenceNumber != undefined) {\n      msg.delivery_annotations.last_enqueued_sequence_number = data.lastSequenceNumber;\n    }\n    if (data.lastEnqueuedTime != undefined) {\n      msg.delivery_annotations.last_enqueued_time_utc = data.lastEnqueuedTime.getTime();\n    }\n    if (data.retrievalTime != undefined) {\n      msg.delivery_annotations.runtime_info_retrieval_time_utc = data.retrievalTime.getTime();\n    }\n\n    if (data.header) {\n      // Set amqp message header as top level properties, since rhea expects them as top level properties.\n      for (const prop in data.header) {\n        (msg as any)[prop] = (data.header as any)[prop];\n      }\n    }\n\n    return msg;\n  }\n}\n","// Unique ID creation requires a high quality random # generator.  In node.js\n// this is pretty straight-forward - we use the crypto API.\n\nvar crypto = require('crypto');\n\nmodule.exports = function nodeRNG() {\n  return crypto.randomBytes(16);\n};\n","/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\nfor (var i = 0; i < 256; ++i) {\n  byteToHex[i] = (i + 0x100).toString(16).substr(1);\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex;\n  // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4\n  return ([bth[buf[i++]], bth[buf[i++]], \n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]],\n\tbth[buf[i++]], bth[buf[i++]],\n\tbth[buf[i++]], bth[buf[i++]]]).join('');\n}\n\nmodule.exports = bytesToUuid;\n","var rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\nfunction v4(options, buf, offset) {\n  var i = buf && offset || 0;\n\n  if (typeof(options) == 'string') {\n    buf = options === 'binary' ? new Array(16) : null;\n    options = null;\n  }\n  options = options || {};\n\n  var rnds = options.random || (options.rng || rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    for (var ii = 0; ii < 16; ++ii) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || bytesToUuid(rnds);\n}\n\nmodule.exports = v4;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport debugModule from \"debug\";\n/**\n * @ignore\n * log statements for error\n */\nexport const error = debugModule(\"azure:event-hubs:error\");\n/**\n * @ignore\n * log statements for management\n */\nexport const mgmt = debugModule(\"azure:event-hubs:management\");\n/**\n * @ignore\n * log statements for sender\n */\nexport const sender = debugModule(\"azure:event-hubs:sender\");\n/**\n * @ignore\n * log statements for receiver\n */\nexport const receiver = debugModule(\"azure:event-hubs:receiver\");\n/**\n * @ignore\n * log statements for receiverbatching\n */\nexport const batching = debugModule(\"azure:event-hubs:receiverbatching\");\n/**\n * @ignore\n * log statements for receiverstreaming\n */\nexport const streaming = debugModule(\"azure:event-hubs:receiverstreaming\");\n/**\n * @ignore\n * log statements for linkEntity\n */\nexport const link = debugModule(\"azure:event-hubs:linkEntity\");\n/**\n * @ignore\n * log statements for connectionContext\n */\nexport const context = debugModule(\"azure:event-hubs:connectionContext\");\n/**\n * @ignore\n * log statements for client\n */\nexport const client = debugModule(\"azure:event-hubs:client\");\n\n/**\n * @ignore\n * log statements for iothub client\n */\nexport const iotClient = debugModule(\"azure:event-hubs:iothubClient\");\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport uuid from \"uuid/v4\";\nimport { defaultLock } from \"@azure/amqp-common\";\nimport { ConnectionContext } from \"./connectionContext\";\nimport { Sender, Receiver } from \"rhea-promise\";\nimport * as log from \"./log\";\nexport interface LinkEntityOptions {\n  /**\n   * @property {string} [name] The unique name for the entity. If not provided then a guid will be\n   * assigned.\n   */\n  name?: string;\n  /**\n   * @property {string | number} [partitionId] The partitionId associated with the link entity.\n   */\n  partitionId?: string | number;\n  /**\n   * @property {string} address The link entity address in one of the following forms:\n   */\n  address?: string;\n  /**\n   * @property {string} audience The link entity token audience in one of the following forms:\n   */\n  audience?: string;\n}\n\n/**\n * Describes the base class for entities like EventHub Sender, Receiver and Management link.\n * @ignore\n * @class LinkEntity\n */\nexport class LinkEntity {\n  /**\n   * @property {string} [name] The unique name for the entity (mostly a guid).\n   */\n  name: string;\n  /**\n   * @property {string} address The link entity address in one of the following forms:\n   *\n   * **Sender**\n   * - `\"<hubName>\"`\n   * - `\"<hubName>/Partitions/<partitionId>\"`.\n   *\n   * **Receiver**\n   * - `\"<event-hub-name>/ConsumerGroups/<consumer-group-name>/Partitions/<partition-id>\"`.\n   *\n   * **ManagementClient**\n   * -`\"$management\"`.\n   */\n  address: string;\n  /**\n   * @property {string} audience The link entity token audience in one of the following forms:\n   *\n   * **Sender**\n   * - `\"sb://<yournamespace>.servicebus.windows.net/<hubName>\"`\n   * - `\"sb://<yournamespace>.servicebus.windows.net/<hubName>/Partitions/<partitionId>\"`.\n   *\n   * **Receiver**\n   * - `\"sb://<your-namespace>.servicebus.windows.net/<event-hub-name>/ConsumerGroups/<consumer-group-name>/Partitions/<partition-id>\"`.\n   *\n   * **ManagementClient**\n   * - `\"sb://<your-namespace>.servicebus.windows.net/<event-hub-name>/$management\"`.\n   */\n  audience: string;\n  /**\n   * @property {string | number} [partitionId] The partitionId associated with the link entity.\n   */\n  partitionId?: string | number;\n  /**\n   * @property {boolean} isConnecting Indicates whether the link is in the process of connecting\n   * (establishing) itself. Default value: `false`.\n   */\n  isConnecting: boolean = false;\n  /**\n   * @property {ConnectionContext} _context Provides relevant information about the amqp connection,\n   * cbs and $management sessions, token provider, sender and receivers.\n   * @protected\n   */\n  protected _context: ConnectionContext;\n  /**\n   * @property {NodeJS.Timer} _tokenRenewalTimer The token renewal timer that keeps track of when\n   * the Link Entity is due for token renewal.\n   * @protected\n   */\n  protected _tokenRenewalTimer?: NodeJS.Timer;\n  /**\n   * Creates a new LinkEntity instance.\n   * @ignore\n   * @constructor\n   * @param {ConnectionContext} context The connection context.\n   * @param {LinkEntityOptions} [options] Options that can be provided while creating the LinkEntity.\n   */\n  constructor(context: ConnectionContext, options?: LinkEntityOptions) {\n    if (!options) options = {};\n    this._context = context;\n    this.address = options.address || \"\";\n    this.audience = options.audience || \"\";\n    this.name = options.name || uuid();\n    this.partitionId = options.partitionId;\n  }\n\n  /**\n   * Negotiates cbs claim for the LinkEntity.\n   * @ignore\n   * @protected\n   * @param {boolean} [setTokenRenewal] Set the token renewal timer. Default false.\n   * @return {Promise<void>} Promise<void>\n   */\n  protected async _negotiateClaim(setTokenRenewal?: boolean): Promise<void> {\n    // Acquire the lock and establish a cbs session if it does not exist on the connection.\n    // Although node.js is single threaded, we need a locking mechanism to ensure that a\n    // race condition does not happen while creating a shared resource (in this case the\n    // cbs session, since we want to have exactly 1 cbs session per connection).\n    log.link(\n      \"[%s] Acquiring cbs lock: '%s' for creating the cbs session while creating the %s: \" + \"'%s' with address: '%s'.\",\n      this._context.connectionId,\n      this._context.cbsSession.cbsLock,\n      this._type,\n      this.name,\n      this.address\n    );\n    await defaultLock.acquire(this._context.cbsSession.cbsLock, () => {\n      return this._context.cbsSession.init();\n    });\n    const tokenObject = await this._context.tokenProvider.getToken(this.audience);\n    log.link(\n      \"[%s] %s: calling negotiateClaim for audience '%s'.\",\n      this._context.connectionId,\n      this._type,\n      this.audience\n    );\n    // Acquire the lock to negotiate the CBS claim.\n    log.link(\n      \"[%s] Acquiring cbs lock: '%s' for cbs auth for %s: '%s' with address '%s'.\",\n      this._context.connectionId,\n      this._context.negotiateClaimLock,\n      this._type,\n      this.name,\n      this.address\n    );\n    await defaultLock.acquire(this._context.negotiateClaimLock, () => {\n      return this._context.cbsSession.negotiateClaim(this.audience, tokenObject);\n    });\n    log.link(\n      \"[%s] Negotiated claim for %s '%s' with with address: %s\",\n      this._context.connectionId,\n      this._type,\n      this.name,\n      this.address\n    );\n    if (setTokenRenewal) {\n      await this._ensureTokenRenewal();\n    }\n  }\n\n  /**\n   * Ensures that the token is renewed within the predefined renewal margin.\n   * @ignore\n   * @protected\n   * @returns {void}\n   */\n  protected async _ensureTokenRenewal(): Promise<void> {\n    const tokenValidTimeInSeconds = this._context.tokenProvider.tokenValidTimeInSeconds;\n    const tokenRenewalMarginInSeconds = this._context.tokenProvider.tokenRenewalMarginInSeconds;\n    const nextRenewalTimeout = (tokenValidTimeInSeconds - tokenRenewalMarginInSeconds) * 1000;\n    this._tokenRenewalTimer = setTimeout(async () => {\n      try {\n        await this._negotiateClaim(true);\n      } catch (err) {\n        log.error(\n          \"[%s] %s '%s' with address %s, an error occurred while renewing the token: %O\",\n          this._context.connectionId,\n          this._type,\n          this.name,\n          this.address,\n          err\n        );\n      }\n    }, nextRenewalTimeout);\n    log.link(\n      \"[%s] %s '%s' with address %s, has next token renewal in %d seconds @(%s).\",\n      this._context.connectionId,\n      this._type,\n      this.name,\n      this.address,\n      nextRenewalTimeout / 1000,\n      new Date(Date.now() + nextRenewalTimeout).toString()\n    );\n  }\n\n  /**\n   * Closes the Sender|Receiver link and it's underlying session and also removes it from the\n   * internal map.\n   * @ignore\n   * @param {Sender | Receiver} [link] The Sender or Receiver link that needs to be closed and\n   * removed.\n   */\n  protected async _closeLink(link?: Sender | Receiver): Promise<void> {\n    clearTimeout(this._tokenRenewalTimer as NodeJS.Timer);\n    if (link) {\n      try {\n        // Closing the link and its underlying session if the link is open. This should also\n        // remove them from the internal map.\n        await link.close();\n        log.link(\n          \"[%s] %s '%s' with address '%s' closed.\",\n          this._context.connectionId,\n          this._type,\n          this.name,\n          this.address\n        );\n      } catch (err) {\n        log.error(\n          \"[%s] An error occurred while closing the %s '%s' with address '%s': %O\",\n          this._context.connectionId,\n          this._type,\n          this.name,\n          this.address,\n          err\n        );\n      }\n    }\n  }\n\n  /**\n   * Provides the current type of the LinkEntity.\n   * @return {string} The entity type.\n   */\n  private get _type(): string {\n    let result = \"LinkEntity\";\n    if ((this as any).constructor && (this as any).constructor.name) {\n      result = (this as any).constructor.name;\n    }\n    return result;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { translate, Constants, ErrorNameConditionMapper } from \"@azure/amqp-common\";\n\n/**\n * Describes the options that can be set while creating an EventPosition.\n * @ignore\n * @interface EventPositionOptions\n */\nexport interface EventPositionOptions {\n  /**\n   * @property {string} [offset] The offset of the event at the position. It can be undefined\n   * if the position is just created from a sequence number or an enqueued time.\n   */\n  offset?: string;\n  /**\n   * @property {boolean} isInclusive Indicates if the current event at the specified offset is\n   * included or not. It is only applicable if offset is set. Default value: false.\n   */\n  isInclusive?: boolean;\n  /**\n   * @property {Date|number} [enqueuedTime] The enqueued time of the event at the position. It can be undefined\n   * if the position is just created from a sequence number or an offset.\n   */\n  enqueuedTime?: Date | number;\n\n  /**\n   * @property {number} [sequenceNumber] The sequence number of the event at the position. It can be undefined\n   * if the position is just created from an enqueued time or an offset.\n   */\n  sequenceNumber?: number;\n\n  /**\n   * @property {string} [customFilter] The custom filter expression that needs to be set on the receiver.\n   */\n  customFilter?: string;\n}\n\n/**\n * Represents options can be set during the creation of a event hub receiver.\n * Defines a position of an @link~EventData in the event hub partition.\n * @class EventPosition\n */\nexport class EventPosition {\n  /**\n   * @property {string} startOfStream The offset from which events would be received: `\"-1\"`.\n   * @static\n   * @readonly\n   */\n  static readonly startOfStream: string = \"-1\";\n  /**\n   * @property {string} endOfStream The offset from which events would be received: `\"@latest\"`.\n   * @static\n   * @readonly\n   */\n  static readonly endOfStream: string = \"@latest\";\n  /**\n   * @property {string} [offset] The offset of the event at the position. It can be undefined\n   * if the position is just created from a sequence number or an enqueued time.\n   */\n  offset?: string;\n  /**\n   * @property {boolean} isInclusive Indicates if the current event at the specified offset is\n   * included or not. It is only applicable if offset is set. Default value: false.\n   */\n  isInclusive: boolean = false;\n  /**\n   * @property {Date|number} [enqueuedTime] The enqueued time of the event at the position. It can be undefined\n   * if the position is just created from a sequence number or an offset.\n   */\n  enqueuedTime?: Date | number;\n\n  /**\n   * @property {number} [sequenceNumber] The sequence number of the event at the position. It can be undefined\n   * if the position is just created from an enqueued time or an offset.\n   */\n  sequenceNumber?: number;\n\n  /**\n   * @property {string} [customFilter] The custom filter expression that needs to be set on the receiver.\n   */\n  customFilter?: string;\n\n  constructor(options?: EventPositionOptions) {\n    if (options) {\n      this.offset = options.offset;\n      this.enqueuedTime = options.enqueuedTime;\n      this.sequenceNumber = options.sequenceNumber;\n      this.isInclusive = options.isInclusive || false;\n      this.customFilter = options.customFilter;\n    }\n  }\n\n  /**\n   * Gets the expression (filter clause) that needs to be set on the source.\n   * @return {string} filterExpression\n   */\n  getExpression(): string {\n    let result;\n    // order of preference\n    if (this.offset != undefined) {\n      result = this.isInclusive\n        ? `${Constants.offsetAnnotation} >= '${this.offset}'`\n        : `${Constants.offsetAnnotation} > '${this.offset}'`;\n    } else if (this.sequenceNumber != undefined) {\n      result = this.isInclusive\n        ? `${Constants.sequenceNumberAnnotation} >= '${this.sequenceNumber}'`\n        : `${Constants.sequenceNumberAnnotation} > '${this.sequenceNumber}'`;\n    } else if (this.enqueuedTime != undefined) {\n      const time = this.enqueuedTime instanceof Date ? this.enqueuedTime.getTime() : this.enqueuedTime;\n      result = `${Constants.enqueuedTimeAnnotation} > '${time}'`;\n    } else if (this.customFilter != undefined) {\n      result = this.customFilter;\n    }\n\n    if (!result) {\n      throw translate({\n        condition: ErrorNameConditionMapper.ArgumentError,\n        description: \"No starting position was set in the EventPosition.\"\n      });\n    }\n    return result;\n  }\n\n  /**\n   * Creates a position at the given offset.\n   * @param {string} offset The offset of the data relative to the Event Hub partition stream.\n   * The offset is a marker or identifier for an event within the Event Hubs stream.\n   * The identifier is unique within a partition of the Event Hubs stream.\n   * @param {boolean} isInclusive If true, the specified event is included;\n   * otherwise the next event is returned. Default: false.\n   * @return {EventPosition} EventPosition\n   */\n  static fromOffset(offset: string, isInclusive?: boolean): EventPosition {\n    if (!offset || typeof offset !== \"string\") {\n      throw new Error(\"'offset' is a required parameter and must be a non-empty string.\");\n    }\n    return new EventPosition({ offset: offset, isInclusive: isInclusive });\n  }\n\n  /**\n   * Creates a position at the given sequence number.\n   * @param {number} sequenceNumber The logical sequence number of the event within the partition stream of the Event Hub.\n   * @param {boolean} isInclusive If true, the specified event is included;\n   * otherwise the next event is returned. Default false.\n   * @return {EventPosition} EventPosition\n   */\n  static fromSequenceNumber(sequenceNumber: number, isInclusive?: boolean): EventPosition {\n    if (sequenceNumber == undefined || typeof sequenceNumber !== \"number\") {\n      throw new Error(\"'sequenceNumber' is a required parameter and must be of type 'number'.\");\n    }\n    return new EventPosition({ sequenceNumber: sequenceNumber, isInclusive: isInclusive });\n  }\n\n  /**\n   * Creates a position at the given enqueued time.\n   * @param {Date | number} enqueuedTime The enqueue time. This value represents the actual time of enqueuing the message.\n   * @param {boolean} isInclusive If true, the specified event is included; otherwise the next event is returned.\n   * @return {EventPosition} EventPosition\n   */\n  static fromEnqueuedTime(enqueuedTime: Date | number): EventPosition {\n    if (enqueuedTime == undefined || (typeof enqueuedTime !== \"number\" && !(enqueuedTime instanceof Date))) {\n      throw new Error(\"'enqueuedTime' is a required parameter and must be an instance of 'Date' or of type 'number'.\");\n    }\n    return new EventPosition({ enqueuedTime: enqueuedTime });\n  }\n\n  /**\n   * Creates a position based on the given custom filter.\n   * @param {string} customFilter The cutom filter expression that needs to be applied on the receiver. This should be used\n   * only when one of the other methods `fromOffset()`, `fromSequenceNumber()`, `fromEnqueuedTime()` is not applicable for\n   * your scenario.\n   */\n  static withCustomFilter(customFilter: string): EventPosition {\n    if (!customFilter || typeof customFilter !== \"string\") {\n      throw new Error(\"'customFilter' is a required parameter and must be a non-empty string.\");\n    }\n    return new EventPosition({ customFilter: customFilter });\n  }\n\n  /**\n   * Returns the position for the start of a stream. Provide this position in receiver creation to\n   * start receiving from the first available event in the partition.\n   * @return {EventPosition} EventPosition\n   */\n  static fromStart(): EventPosition {\n    return EventPosition.fromOffset(EventPosition.startOfStream);\n  }\n\n  /**\n   * Returns the position for the end of a stream. Provide this position in receiver creation to\n   * start receiving from the next available event in the partition after the receiver is created.\n   * @return {EventPosition} EventPosition\n   */\n  static fromEnd(): EventPosition {\n    return EventPosition.fromOffset(EventPosition.endOfStream);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport uuid from \"uuid/v4\";\nimport * as log from \"./log\";\nimport { Receiver, OnAmqpEvent, EventContext, ReceiverOptions, types, AmqpError } from \"rhea-promise\";\nimport { translate, Constants, MessagingError, retry, RetryOperationType, RetryConfig } from \"@azure/amqp-common\";\nimport { EventData } from \"./eventData\";\nimport { ReceiveOptions } from \"./eventHubClient\";\nimport { ConnectionContext } from \"./connectionContext\";\nimport { LinkEntity } from \"./linkEntity\";\nimport { EventPosition } from \"./eventPosition\";\n\ninterface CreateReceiverOptions {\n  onMessage: OnAmqpEvent;\n  onError: OnAmqpEvent;\n  onClose: OnAmqpEvent;\n  onSessionError: OnAmqpEvent;\n  onSessionClose: OnAmqpEvent;\n  newName?: boolean;\n  eventPosition?: EventPosition;\n}\n\n/**\n * Represents the approximate receiver runtime information for a logical partition of an Event Hub.\n * @interface ReceiverRuntimeInfo\n */\nexport interface ReceiverRuntimeInfo {\n  /**\n   * @property {string} partitionId The parition identifier.\n   */\n  partitionId: string;\n  /**\n   * @property {number} lastSequenceNumber The logical sequence number of the event.\n   */\n  lastSequenceNumber?: number;\n  /**\n   * @property {Date} lastEnqueuedTimeUtc The enqueued time of the last event.\n   */\n  lastEnqueuedTimeUtc?: Date;\n  /**\n   * @property {string} lastEnqueuedOffset The offset of the last enqueued event.\n   */\n  lastEnqueuedOffset?: string;\n  /**\n   * @property {Date} retrievalTime The enqueued time of the last event.\n   */\n  retrievalTime?: Date;\n}\n\n/**\n * Describes the checkoint information.\n * @interface CheckpointData\n */\nexport interface CheckpointData {\n  /**\n   * @property {Date} enqueuedTimeUtc The enqueued time of the event.\n   */\n  enqueuedTimeUtc: Date;\n  /**\n   * @property {string} offset The offset of the event to be checked in.\n   */\n  offset: string;\n  /**\n   * @property {string} sequenceNumber The sequence number of the event to be checked in.\n   */\n  sequenceNumber: number;\n}\n\n/**\n * Describes the message handler signature.\n */\nexport type OnMessage = (eventData: EventData) => void;\n\n/**\n * Describes the error handler signature.\n */\nexport type OnError = (error: MessagingError | Error) => void;\n\n/**\n * Describes the EventHubReceiver that will receive event data from EventHub.\n * @class EventHubReceiver\n * @ignore\n */\nexport class EventHubReceiver extends LinkEntity {\n  /**\n   * @property {string} consumerGroup The EventHub consumer group from which the receiver will\n   * receive messages. (Default: \"default\").\n   */\n  consumerGroup: string;\n  /**\n   * @property {ReceiverRuntimeInfo} runtimeInfo The receiver runtime info.\n   */\n  runtimeInfo: ReceiverRuntimeInfo;\n  /**\n   * @property {number} [epoch] The Receiver epoch.\n   */\n  epoch?: number;\n  /**\n   * @property {string} [identifier] The Receiver identifier\n   */\n  identifier?: string;\n  /**\n   * @property {ReceiveOptions} [options] Optional properties that can be set while creating\n   * the EventHubReceiver.\n   */\n  options: ReceiveOptions;\n  /**\n   * @property {number} [prefetchCount] The number of messages that the receiver can fetch/receive\n   * initially. Defaults to 1000.\n   */\n  prefetchCount?: number = Constants.defaultPrefetchCount;\n  /**\n   * @property {boolean} receiverRuntimeMetricEnabled Indicates whether receiver runtime metric\n   * is enabled. Default: false.\n   */\n  receiverRuntimeMetricEnabled: boolean = false;\n  /**\n   * @property {Receiver} [_receiver] The AMQP receiver link.\n   * @protected\n   */\n  protected _receiver?: Receiver;\n  /**\n   * @property {OnMessage} _onMessage The message handler provided by the user that will be wrapped\n   * inside _onAmqpMessage.\n   * @protected\n   */\n  protected _onMessage?: OnMessage;\n  /**\n   * @property {OnError} _onError The error handler provided by the user that will be wrapped\n   * inside _onAmqpError.\n   * @protected\n   */\n  protected _onError?: OnError;\n  /**\n   * @property {OnAmqpEvent} _onAmqpError The message handler that will be set as the handler on the\n   * underlying rhea receiver for the \"message\" event.\n   * @protected\n   */\n  protected _onAmqpMessage: OnAmqpEvent;\n  /**\n   * @property {OnAmqpEvent} _onAmqpError The message handler that will be set as the handler on the\n   * underlying rhea receiver for the \"receiver_error\" event.\n   * @protected\n   */\n  protected _onAmqpError: OnAmqpEvent;\n  /**\n   * @property {OnAmqpEvent} _onAmqpClose The message handler that will be set as the handler on the\n   * underlying rhea receiver for the \"receiver_close\" event.\n   * @protected\n   */\n  protected _onAmqpClose: OnAmqpEvent;\n  /**\n   * @property {OnAmqpEvent} _onSessionError The message handler that will be set as the handler on\n   * the underlying rhea receiver's session for the \"session_error\" event.\n   * @protected\n   */\n  protected _onSessionError: OnAmqpEvent;\n  /**\n   * @property {OnAmqpEvent} _onSessionClose The message handler that will be set as the handler on\n   * the underlying rhea receiver's session for the \"session_close\" event.\n   * @protected\n   */\n  protected _onSessionClose: OnAmqpEvent;\n  /**\n   * @property {CheckpointData} _checkpoint Describes metadata about the last message received.\n   * This is used as the offset to receive messages from incase of recovery.\n   */\n  protected _checkpoint: CheckpointData;\n\n  /**\n   * Instantiate a new receiver from the AMQP `Receiver`. Used by `EventHubClient`.\n   * @ignore\n   * @constructor\n   * @param {EventHubClient} client                            The EventHub client.\n   * @param {string} partitionId                               Partition ID from which to receive.\n   * @param {ReceiveOptions} [options]                         Receiver options.\n   */\n  constructor(context: ConnectionContext, partitionId: string | number, options?: ReceiveOptions) {\n    super(context, { partitionId: partitionId, name: options ? options.name : undefined });\n    if (!options) options = {};\n    this.consumerGroup = options.consumerGroup ? options.consumerGroup : Constants.defaultConsumerGroup;\n    this.address = context.config.getReceiverAddress(partitionId, this.consumerGroup);\n    this.audience = context.config.getReceiverAudience(partitionId, this.consumerGroup);\n    this.prefetchCount = options.prefetchCount != undefined ? options.prefetchCount : Constants.defaultPrefetchCount;\n    this.epoch = options.epoch;\n    this.identifier = options.identifier;\n    this.options = options;\n    this.receiverRuntimeMetricEnabled = options.enableReceiverRuntimeMetric || false;\n    this.runtimeInfo = {\n      partitionId: `${partitionId}`\n    };\n    this._checkpoint = {\n      enqueuedTimeUtc: new Date(),\n      offset: \"0\",\n      sequenceNumber: -1\n    };\n    this._onAmqpMessage = (context: EventContext) => {\n      const evData = EventData.fromAmqpMessage(context.message!);\n      evData.body = this._context.dataTransformer.decode(context.message!.body);\n      this._checkpoint = {\n        enqueuedTimeUtc: evData.enqueuedTimeUtc!,\n        offset: evData.offset!,\n        sequenceNumber: evData.sequenceNumber!\n      };\n      if (this.receiverRuntimeMetricEnabled && evData) {\n        this.runtimeInfo.lastSequenceNumber = evData.lastSequenceNumber;\n        this.runtimeInfo.lastEnqueuedTimeUtc = evData.lastEnqueuedTime;\n        this.runtimeInfo.lastEnqueuedOffset = evData.lastEnqueuedOffset;\n        this.runtimeInfo.retrievalTime = evData.retrievalTime;\n        log.receiver(\n          \"[%s] RuntimeInfo of Receiver '%s' is %O\",\n          this._context.connectionId,\n          this.name,\n          this.runtimeInfo\n        );\n      }\n      this._onMessage!(evData);\n    };\n\n    this._onAmqpError = (context: EventContext) => {\n      const receiver = this._receiver || context.receiver!;\n      const receiverError = context.receiver && context.receiver.error;\n      if (receiverError) {\n        const ehError = translate(receiverError);\n        log.error(\"[%s] An error occurred for Receiver '%s': %O.\", this._context.connectionId, this.name, ehError);\n        if (!ehError.retryable) {\n          if (receiver && !receiver.isItselfClosed()) {\n            log.error(\n              \"[%s] Since the user did not close the receiver and the error is not \" +\n                \"retryable, we let the user know about it by calling the user's error handler.\",\n              this._context.connectionId\n            );\n            this._onError!(ehError);\n          } else {\n            log.error(\n              \"[%s] The received error is not retryable. However, the receiver was \" +\n                \"closed by the user. Hence not notifying the user's error handler.\",\n              this._context.connectionId\n            );\n          }\n        } else {\n          log.error(\n            \"[%s] Since received error is retryable, we will NOT notify the user's \" + \"error handler.\",\n            this._context.connectionId\n          );\n        }\n      }\n    };\n\n    this._onSessionError = (context: EventContext) => {\n      const receiver = this._receiver || context.receiver!;\n      const sessionError = context.session && context.session.error;\n      if (sessionError) {\n        const ehError = translate(sessionError);\n        log.error(\n          \"[%s] An error occurred on the session for Receiver '%s': %O.\",\n          this._context.connectionId,\n          this.name,\n          ehError\n        );\n        if (receiver && !receiver.isSessionItselfClosed() && !ehError.retryable) {\n          log.error(\n            \"[%s] Since the user did not close the receiver and the session error is not \" +\n              \"retryable, we let the user know about it by calling the user's error handler.\",\n            this._context.connectionId\n          );\n          this._onError!(ehError);\n        }\n      }\n    };\n\n    this._onAmqpClose = async (context: EventContext) => {\n      const receiverError = context.receiver && context.receiver.error;\n      const receiver = this._receiver || context.receiver!;\n      if (receiverError) {\n        log.error(\n          \"[%s] 'receiver_close' event occurred for receiver '%s' with address '%s'. \" + \"The associated error is: %O\",\n          this._context.connectionId,\n          this.name,\n          this.address,\n          receiverError\n        );\n      }\n      if (receiver && !receiver.isItselfClosed()) {\n        if (!this.isConnecting) {\n          log.error(\n            \"[%s] 'receiver_close' event occurred on the receiver '%s' with address '%s' \" +\n              \"and the sdk did not initiate this. The receiver is not reconnecting. Hence, calling \" +\n              \"detached from the _onAmqpClose() handler.\",\n            this._context.connectionId,\n            this.name,\n            this.address\n          );\n          await this.detached(receiverError);\n        } else {\n          log.error(\n            \"[%s] 'receiver_close' event occurred on the receiver '%s' with address '%s' \" +\n              \"and the sdk did not initate this. Moreover the receiver is already re-connecting. \" +\n              \"Hence not calling detached from the _onAmqpClose() handler.\",\n            this._context.connectionId,\n            this.name,\n            this.address\n          );\n        }\n      } else {\n        log.error(\n          \"[%s] 'receiver_close' event occurred on the receiver '%s' with address '%s' \" +\n            \"because the sdk initiated it. Hence not calling detached from the _onAmqpClose\" +\n            \"() handler.\",\n          this._context.connectionId,\n          this.name,\n          this.address\n        );\n      }\n    };\n\n    this._onSessionClose = async (context: EventContext) => {\n      const receiver = this._receiver || context.receiver!;\n      const sessionError = context.session && context.session.error;\n      if (sessionError) {\n        log.error(\n          \"[%s] 'session_close' event occurred for receiver '%s' with address '%s'. \" + \"The associated error is: %O\",\n          this._context.connectionId,\n          this.name,\n          this.address,\n          sessionError\n        );\n      }\n\n      if (receiver && !receiver.isSessionItselfClosed()) {\n        if (!this.isConnecting) {\n          log.error(\n            \"[%s] 'session_close' event occurred on the session of receiver '%s' with \" +\n              \"address '%s' and the sdk did not initiate this. Hence calling detached from the \" +\n              \"_onSessionClose() handler.\",\n            this._context.connectionId,\n            this.name,\n            this.address\n          );\n          await this.detached(sessionError);\n        } else {\n          log.error(\n            \"[%s] 'session_close' event occurred on the session of receiver '%s' with \" +\n              \"address '%s' and the sdk did not initiate this. Moreover the receiver is already \" +\n              \"re-connecting. Hence not calling detached from the _onSessionClose() handler.\",\n            this._context.connectionId,\n            this.name,\n            this.address\n          );\n        }\n      } else {\n        log.error(\n          \"[%s] 'session_close' event occurred on the session of receiver '%s' with address \" +\n            \"'%s' because the sdk initiated it. Hence not calling detached from the _onSessionClose\" +\n            \"() handler.\",\n          this._context.connectionId,\n          this.name,\n          this.address\n        );\n      }\n    };\n  }\n\n  /**\n   * Will reconnect the receiver link if necessary.\n   * @ignore\n   * @param {AmqpError | Error} [receiverError] The receiver error if any.\n   * @returns {Promise<void>} Promise<void>.\n   */\n  async detached(receiverError?: AmqpError | Error): Promise<void> {\n    try {\n      const wasCloseInitiated = this._receiver && this._receiver.isItselfClosed();\n      // Clears the token renewal timer. Closes the link and its session if they are open.\n      // Removes the link and its session if they are present in rhea's cache.\n      await this._closeLink(this._receiver);\n      // We should attempt to reopen only when the receiver(sdk) did not initiate the close\n      let shouldReopen = false;\n      if (receiverError && !wasCloseInitiated) {\n        const translatedError = translate(receiverError);\n        if (translatedError.retryable) {\n          shouldReopen = true;\n          log.error(\n            \"[%s] close() method of Receiver '%s' with address '%s' was not called. There \" +\n              \"was an accompanying error and it is retryable. This is a candidate for re-establishing \" +\n              \"the receiver link.\",\n            this._context.connectionId,\n            this.name,\n            this.address\n          );\n        } else {\n          log.error(\n            \"[%s] close() method of Receiver '%s' with address '%s' was not called. There \" +\n              \"was an accompanying error and it is NOT retryable. Hence NOT re-establishing \" +\n              \"the receiver link.\",\n            this._context.connectionId,\n            this.name,\n            this.address\n          );\n        }\n      } else if (!wasCloseInitiated) {\n        shouldReopen = true;\n        log.error(\n          \"[%s] close() method of Receiver '%s' with address '%s' was not called. \" +\n            \"There was no accompanying error as well. This is a candidate for re-establishing \" +\n            \"the receiver link.\",\n          this._context.connectionId,\n          this.name,\n          this.address\n        );\n      } else {\n        const state: any = {\n          wasCloseInitiated: wasCloseInitiated,\n          receiverError: receiverError,\n          _receiver: this._receiver\n        };\n        log.error(\n          \"[%s] Something went wrong. State of Receiver '%s' with address '%s' is: %O\",\n          this._context.connectionId,\n          this.name,\n          this.address,\n          state\n        );\n      }\n      if (shouldReopen) {\n        const rcvrOptions: CreateReceiverOptions = {\n          onMessage: this._onAmqpMessage,\n          onError: this._onAmqpError,\n          onClose: this._onAmqpClose,\n          onSessionError: this._onSessionError,\n          onSessionClose: this._onSessionClose,\n          newName: true // provide a new name to the link while re-connecting it. This ensures that\n          // the service does not send an error stating that the link is still open.\n        };\n        // reconnect the receiver link with sequenceNumber of the last received message as the offset\n        // if messages were received by the receiver before it got disconnected.\n        if (this._checkpoint.sequenceNumber > -1) {\n          rcvrOptions.eventPosition = EventPosition.fromSequenceNumber(this._checkpoint.sequenceNumber);\n        }\n        const options: ReceiverOptions = this._createReceiverOptions(rcvrOptions);\n        // shall retry forever at an interval of 15 seconds if the error is a retryable error\n        // else bail out when the error is not retryable or the oepration succeeds.\n        const config: RetryConfig<void> = {\n          operation: () => this._init(options),\n          connectionId: this._context.connectionId,\n          operationType: RetryOperationType.receiverLink,\n          times: Constants.defaultConnectionRetryAttempts,\n          connectionHost: this._context.config.host,\n          delayInSeconds: 15\n        };\n        await retry<void>(config);\n      }\n    } catch (err) {\n      log.error(\n        \"[%s] An error occurred while processing detached() of Receiver '%s' with address \" + \"'%s': %O\",\n        this._context.connectionId,\n        this.name,\n        this.address,\n        err\n      );\n    }\n  }\n\n  /**\n   * Closes the underlying AMQP receiver.\n   * @ignore\n   * @returns {Promise<void>}\n   */\n  async close(): Promise<void> {\n    if (this._receiver) {\n      const receiverLink = this._receiver;\n      this._deleteFromCache();\n      await this._closeLink(receiverLink);\n    }\n  }\n\n  /**\n   * Determines whether the AMQP receiver link is open. If open then returns true else returns false.\n   * @ignore\n   * @return {boolean} boolean\n   */\n  isOpen(): boolean {\n    const result: boolean = this._receiver! && this._receiver!.isOpen();\n    log.error(\n      \"[%s] Receiver '%s' with address '%s' is open? -> %s\",\n      this._context.connectionId,\n      this.name,\n      this.address,\n      result\n    );\n    return result;\n  }\n\n  protected _deleteFromCache(): void {\n    this._receiver = undefined;\n    delete this._context.receivers[this.name];\n    log.error(\"[%s] Deleted the receiver '%s' from the client cache.\", this._context.connectionId, this.name);\n  }\n\n  /**\n   * Creates a new AMQP receiver under a new AMQP session.\n   * @ignore\n   * @returns {Promise<void>}\n   */\n  protected async _init(options?: ReceiverOptions): Promise<void> {\n    try {\n      if (!this.isOpen() && !this.isConnecting) {\n        log.error(\n          \"[%s] The receiver '%s' with address '%s' is not open and is not currently \" +\n            \"establishing itself. Hence let's try to connect.\",\n          this._context.connectionId,\n          this.name,\n          this.address\n        );\n        this.isConnecting = true;\n        await this._negotiateClaim();\n        if (!options) {\n          options = this._createReceiverOptions({\n            onMessage: this._onAmqpMessage,\n            onError: this._onAmqpError,\n            onClose: this._onAmqpClose,\n            onSessionError: this._onSessionError,\n            onSessionClose: this._onSessionClose\n          });\n        }\n        log.error(\n          \"[%s] Trying to create receiver '%s' with options %O\",\n          this._context.connectionId,\n          this.name,\n          options\n        );\n\n        this._receiver = await this._context.connection.createReceiver(options);\n        this.isConnecting = false;\n        log.error(\n          \"[%s] Receiver '%s' with address '%s' has established itself.\",\n          this._context.connectionId,\n          this.name,\n          this.address\n        );\n        log.receiver(\"Promise to create the receiver resolved. Created receiver with name: \", this.name);\n        log.receiver(\n          \"[%s] Receiver '%s' created with receiver options: %O\",\n          this._context.connectionId,\n          this.name,\n          options\n        );\n        // It is possible for someone to close the receiver and then start it again.\n        // Thus make sure that the receiver is present in the client cache.\n        if (!this._context.receivers[this.name]) this._context.receivers[this.name] = this;\n        await this._ensureTokenRenewal();\n      } else {\n        log.error(\n          \"[%s] The receiver '%s' with address '%s' is open -> %s and is connecting \" +\n            \"-> %s. Hence not reconnecting.\",\n          this._context.connectionId,\n          this.name,\n          this.address,\n          this.isOpen(),\n          this.isConnecting\n        );\n      }\n    } catch (err) {\n      this.isConnecting = false;\n      err = translate(err);\n      log.error(\n        \"[%s] An error occured while creating the receiver '%s': %O\",\n        this._context.connectionId,\n        this.name,\n        err\n      );\n      throw err;\n    }\n  }\n\n  /**\n   * Creates the options that need to be specified while creating an AMQP receiver link.\n   * @ignore\n   */\n  protected _createReceiverOptions(options: CreateReceiverOptions): ReceiverOptions {\n    if (options.newName) this.name = `${uuid()}`;\n    const rcvrOptions: ReceiverOptions = {\n      name: this.name,\n      autoaccept: true,\n      source: {\n        address: this.address\n      },\n      credit_window: this.prefetchCount,\n      onMessage: options.onMessage || this._onAmqpMessage,\n      onError: options.onError || this._onAmqpError,\n      onClose: options.onClose || this._onAmqpClose,\n      onSessionError: options.onSessionError || this._onSessionError,\n      onSessionClose: options.onSessionClose || this._onSessionClose\n    };\n    if (this.epoch !== undefined && this.epoch !== null) {\n      if (!rcvrOptions.properties) rcvrOptions.properties = {};\n      rcvrOptions.properties[Constants.attachEpoch] = types.wrap_long(this.epoch);\n    }\n    if (this.identifier) {\n      if (!rcvrOptions.properties) rcvrOptions.properties = {};\n      rcvrOptions.properties[Constants.receiverIdentifierName] = this.identifier;\n    }\n    if (this.receiverRuntimeMetricEnabled) {\n      rcvrOptions.desired_capabilities = Constants.enableReceiverRuntimeMetricName;\n    }\n    const eventPosition = options.eventPosition || this.options.eventPosition;\n    if (eventPosition) {\n      // Set filter on the receiver if event position is specified.\n      const filterClause = eventPosition.getExpression();\n      if (filterClause) {\n        (rcvrOptions.source as any).filter = {\n          \"apache.org:selector-filter:string\": types.wrap_described(filterClause, 0x468c00000004)\n        };\n      }\n    }\n    return rcvrOptions;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Constants } from \"@azure/amqp-common\";\nimport { ReceiverEvents } from \"rhea-promise\";\nimport { ReceiveOptions } from \"./eventHubClient\";\nimport { EventHubReceiver, ReceiverRuntimeInfo, OnMessage, OnError } from \"./eventHubReceiver\";\nimport { ConnectionContext } from \"./connectionContext\";\nimport * as log from \"./log\";\n\n/**\n * Describes the receive handler object that is returned from the receive() method with handlers is\n * called. The ReceiveHandler is used to stop receiving more messages.\n * @class ReceiveHandler\n */\nexport class ReceiveHandler {\n  /**\n   * @property {string} name The Receiver handler name.\n   * @readonly\n   */\n  readonly name: string;\n\n  /**\n   * @property {EventHubReceiver} _receiver  The underlying EventHubReceiver.\n   * @private\n   */\n  private _receiver: EventHubReceiver;\n\n  /**\n   * Creates an instance of the ReceiveHandler.\n   * @constructor\n   * @param {EventHubReceiver} receiver The underlying EventHubReceiver.\n   */\n  constructor(receiver: EventHubReceiver) {\n    this._receiver = receiver;\n    this.name = receiver ? receiver.name : \"ReceiveHandler\";\n  }\n\n  /**\n   * @property {string | number} [partitionId] The partitionId from which the handler is receiving\n   * events from.\n   * @readonly\n   */\n  get partitionId(): string | number | undefined {\n    return this._receiver ? this._receiver.partitionId : undefined;\n  }\n\n  /**\n   * @property {string} [consumerGroup] The consumer group from which the handler is receiving\n   * events from.\n   * @readonly\n   */\n  get consumerGroup(): string | undefined {\n    return this._receiver ? this._receiver.consumerGroup : undefined;\n  }\n\n  /**\n   * @property {string} [address] The address of the underlying receiver.\n   * @readonly\n   */\n  get address(): string | undefined {\n    return this._receiver ? this._receiver.address : undefined;\n  }\n\n  /**\n   * @property {number} [epoch] The epoch value of the underlying receiver, if present.\n   * @readonly\n   */\n  get epoch(): number | undefined {\n    return this._receiver ? this._receiver.epoch : undefined;\n  }\n\n  /**\n   * @property {string} [identifier] The identifier of the underlying receiver, if present.\n   * @readonly\n   */\n  get identifier(): string | undefined {\n    return this._receiver ? this._receiver.identifier : undefined;\n  }\n\n  /**\n   * @property {ReceiverRuntimeInfo} [runtimeInfo] The receiver runtime info. This property will only\n   * be enabled when `enableReceiverRuntimeMetric` option is set to true in the\n   * `client.receive()` method.\n   * @readonly\n   */\n  get runtimeInfo(): ReceiverRuntimeInfo | undefined {\n    return this._receiver ? this._receiver.runtimeInfo : undefined;\n  }\n\n  /**\n   * @property {boolean} isReceiverOpen Indicates whether the receiver is connected/open.\n   * `true` - is open; `false` otherwise.\n   * @readonly\n   */\n  get isReceiverOpen(): boolean {\n    return this._receiver ? this._receiver.isOpen() : false;\n  }\n\n  /**\n   * Stops the underlying EventHubReceiver from receiving more messages.\n   * @return {Promise<void>} Promise<void>\n   */\n  async stop(): Promise<void> {\n    if (this._receiver) {\n      try {\n        await this._receiver.close();\n      } catch (err) {\n        log.error(\n          \"An error occurred while stopping the receiver '%s' with address '%s': %O\",\n          this._receiver.name,\n          this._receiver.address,\n          err\n        );\n      }\n    }\n  }\n}\n\n/**\n * Describes the streaming receiver where the user can receive the message\n * by providing handler functions.\n * @ignore\n * @class StreamingReceiver\n * @extends EventHubReceiver\n */\nexport class StreamingReceiver extends EventHubReceiver {\n  receiveHandler: ReceiveHandler;\n  /**\n   * Instantiate a new receiver from the AMQP `Receiver`. Used by `EventHubClient`.\n   * @ignore\n   * @constructor\n   * @param {EventHubClient} client          The EventHub client.\n   * @param {string} partitionId             Partition ID from which to receive.\n   * @param {ReceiveOptions} [options]       Options for how you'd like to connect.\n   */\n  constructor(context: ConnectionContext, partitionId: string | number, options?: ReceiveOptions) {\n    super(context, partitionId, options);\n    this.receiveHandler = new ReceiveHandler(this);\n  }\n\n  /**\n   * Starts the receiver by establishing an AMQP session and an AMQP receiver link on the session.\n   * @ignore\n   * @param {OnMessage} onMessage The message handler to receive event data objects.\n   * @param {OnError} onError The error handler to receive an error that occurs while receivin messages.\n   */\n  receive(onMessage: OnMessage, onError: OnError): ReceiveHandler {\n    if (!onMessage || typeof onMessage !== \"function\") {\n      throw new Error(\"'onMessage' is a required parameter and must be of type 'function'.\");\n    }\n    if (!onError || typeof onError !== \"function\") {\n      throw new Error(\"'onError' is a required parameter and must be of type 'function'.\");\n    }\n    this._onMessage = onMessage;\n    this._onError = onError;\n    if (!this.isOpen()) {\n      this._init().catch(err => {\n        this._onError!(err);\n      });\n    } else {\n      // It is possible that the receiver link has been established due to a previous receive() call. If that\n      // is the case then add message and error event handlers to the receiver. When the receiver will be closed\n      // these handlers will be automatically removed.\n      log.streaming(\n        \"[%s] Receiver link is already present for '%s' due to previous receive() calls. \" +\n          \"Hence reusing it and attaching message and error handlers.\",\n        this._context.connectionId,\n        this.name\n      );\n      this._receiver!.on(ReceiverEvents.message, this._onAmqpMessage);\n      this._receiver!.on(ReceiverEvents.receiverError, this._onAmqpError);\n      this._receiver!.setCreditWindow(Constants.defaultPrefetchCount);\n      this._receiver!.addCredit(Constants.defaultPrefetchCount);\n      log.streaming(\n        \"[%s] Receiver '%s', set the prefetch count to 1000 and \" + \"providing a credit of the same amount.\",\n        this._context.connectionId,\n        this.name\n      );\n    }\n    return this.receiveHandler;\n  }\n\n  /**\n   * Creates a streaming receiver.\n   * @static\n   * @ignore\n   * @param {ConnectionContext} context    The connection context.\n   * @param {string | number} partitionId  The partitionId to receive events from.\n   * @param {ReceiveOptions} [options]     Receive options.\n   */\n  static create(context: ConnectionContext, partitionId: string | number, options?: ReceiveOptions): StreamingReceiver {\n    const sReceiver = new StreamingReceiver(context, partitionId, options);\n    context.receivers[sReceiver.name] = sReceiver;\n    return sReceiver;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { name, version } from \"../../package.json\";\n\nexport const packageJsonInfo = {\n  name: name,\n  version: version\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport uuid from \"uuid/v4\";\nimport { RequestResponseLink, defaultLock, translate, Constants } from \"@azure/amqp-common\";\nimport { Message, EventContext, SenderEvents, ReceiverEvents, SenderOptions, ReceiverOptions } from \"rhea-promise\";\nimport { ConnectionContext } from \"./connectionContext\";\nimport { LinkEntity } from \"./linkEntity\";\nimport * as log from \"./log\";\n/**\n * Describes the runtime information of an EventHub.\n * @interface EventHubRuntimeInformation\n */\nexport interface EventHubRuntimeInformation {\n  /**\n   * @property {string} path - The name of the event hub.\n   */\n  path: string;\n  /**\n   * @property {Date} createdAt - The date and time the hub was created in UTC.\n   */\n  createdAt: Date;\n  /**\n   * @property {number} partitionCount - The number of partitions in the event hub.\n   */\n  partitionCount: number;\n  /**\n   * @property {string[]} partitionIds - The slice of string partition identifiers.\n   */\n  partitionIds: string[];\n  /**\n   * @property {string} type - The type of entity.\n   */\n  type: \"com.microsoft:eventhub\";\n}\n\n/**\n * Describes the runtime information of an EventHub Partition.\n * @interface EventHubPartitionRuntimeInformation\n */\nexport interface EventHubPartitionRuntimeInformation {\n  /**\n   * @property {string} hubPath - The name of the eventhub.\n   */\n  hubPath: string;\n  /**\n   * @property {string} partitionId - Identifier of the partition within the eventhub.\n   */\n  partitionId: string;\n  /**\n   * @property {number} beginningSequenceNumber - The starting sequence number of the partition's message log.\n   */\n  beginningSequenceNumber: number;\n  /**\n   * @property {number} lastSequenceNumber - The last sequence number of the partition's message log.\n   */\n  lastSequenceNumber: number;\n  /**\n   * @property {string} lastEnqueuedOffset - The offset of the last enqueued message in the partition's message log.\n   */\n  lastEnqueuedOffset: string;\n  /**\n   * @property {Date} lastEnqueuedTimeUtc - The time of the last enqueued message in the partition's message log in UTC.\n   */\n  lastEnqueuedTimeUtc: Date;\n  /**\n   * @property {string} type - The type of entity.\n   */\n  type: \"com.microsoft:partition\";\n}\n\nexport interface ManagementClientOptions {\n  address?: string;\n  audience?: string;\n}\n\n/**\n * @class ManagementClient\n * @ignore\n * Descibes the EventHubs Management Client that talks\n * to the $management endpoint over AMQP connection.\n */\nexport class ManagementClient extends LinkEntity {\n  readonly managementLock: string = `${Constants.managementRequestKey}-${uuid()}`;\n  /**\n   * @property {string} entityPath - The name/path of the entity (hub name) for which the management\n   * request needs to be made.\n   */\n  entityPath: string;\n  /**\n   * @property {string} replyTo The reply to Guid for the management client.\n   */\n  replyTo: string = uuid();\n  /**\n   * $management sender, receiver on the same session.\n   * @private\n   */\n  private _mgmtReqResLink?: RequestResponseLink;\n\n  /**\n   * Instantiates the management client.\n   * @constructor\n   * @ignore\n   * @param {BaseConnectionContext} context The connection context.\n   * @param {string} [address] The address for the management endpoint. For IotHub it will be\n   * `/messages/events/$management`.\n   */\n  constructor(context: ConnectionContext, options?: ManagementClientOptions) {\n    super(context, {\n      address: options && options.address ? options.address : Constants.management,\n      audience: options && options.audience ? options.audience : context.config.getManagementAudience()\n    });\n    this._context = context;\n    this.entityPath = context.config.entityPath as string;\n  }\n\n  /**\n   * Provides the eventhub runtime information.\n   * @ignore\n   * @param {Connection} connection - The established amqp connection\n   * @returns {Promise<EventHubRuntimeInformation>}\n   */\n  async getHubRuntimeInformation(): Promise<EventHubRuntimeInformation> {\n    const info: any = await this._makeManagementRequest(Constants.eventHub);\n    const runtimeInfo: EventHubRuntimeInformation = {\n      path: info.name,\n      createdAt: new Date(info.created_at),\n      partitionCount: info.partition_count,\n      partitionIds: info.partition_ids,\n      type: info.type\n    };\n    log.mgmt(\"[%s] The hub runtime info is: %O\", this._context.connectionId, runtimeInfo);\n    return runtimeInfo;\n  }\n\n  /**\n   * Provides an array of partitionIds.\n   * @ignore\n   * @param {Connection} connection - The established amqp connection\n   * @returns {Promise<Array<string>>}\n   */\n  async getPartitionIds(): Promise<Array<string>> {\n    const runtimeInfo = await this.getHubRuntimeInformation();\n    return runtimeInfo.partitionIds;\n  }\n\n  /**\n   * Provides information about the specified partition.\n   * @ignore\n   * @param {Connection} connection - The established amqp connection\n   * @param {(string|number)} partitionId Partition ID for which partition information is required.\n   */\n  async getPartitionInformation(partitionId: string | number): Promise<EventHubPartitionRuntimeInformation> {\n    if (typeof partitionId !== \"string\" && typeof partitionId !== \"number\") {\n      throw new Error(\"'partitionId' is a required parameter and must be of \" + \"type: 'string' | 'number'.\");\n    }\n    const info: any = await this._makeManagementRequest(Constants.partition, partitionId);\n    const partitionInfo: EventHubPartitionRuntimeInformation = {\n      beginningSequenceNumber: info.begin_sequence_number,\n      hubPath: info.name,\n      lastEnqueuedOffset: info.last_enqueued_offset,\n      lastEnqueuedTimeUtc: new Date(info.last_enqueued_time_utc),\n      lastSequenceNumber: info.last_enqueued_sequence_number,\n      partitionId: info.partition,\n      type: info.type\n    };\n    log.mgmt(\"[%s] The partition info is: %O.\", this._context.connectionId, partitionInfo);\n    return partitionInfo;\n  }\n\n  /**\n   * Closes the AMQP management session to the Event Hub for this client,\n   * returning a promise that will be resolved when disconnection is completed.\n   * @ignore\n   * @return {Promise<void>}\n   */\n  async close(): Promise<void> {\n    try {\n      if (this._isMgmtRequestResponseLinkOpen()) {\n        const mgmtLink = this._mgmtReqResLink;\n        this._mgmtReqResLink = undefined;\n        clearTimeout(this._tokenRenewalTimer as NodeJS.Timer);\n        await mgmtLink!.close();\n        log.mgmt(\"Successfully closed the management session.\");\n      }\n    } catch (err) {\n      const msg = `An error occurred while closing the management session: ${err}`;\n      log.error(msg);\n      throw new Error(msg);\n    }\n  }\n\n  private async _init(): Promise<void> {\n    try {\n      if (!this._isMgmtRequestResponseLinkOpen()) {\n        await this._negotiateClaim();\n        const rxopt: ReceiverOptions = {\n          source: { address: this.address },\n          name: this.replyTo,\n          target: { address: this.replyTo },\n          onSessionError: (context: EventContext) => {\n            const id = context.connection.options.id;\n            const ehError = translate(context.session!.error!);\n            log.error(\n              \"[%s] An error occurred on the session for request/response links for \" + \"$management: %O\",\n              id,\n              ehError\n            );\n          }\n        };\n        const sropt: SenderOptions = { target: { address: this.address } };\n        log.mgmt(\n          \"[%s] Creating sender/receiver links on a session for $management endpoint with \" +\n            \"srOpts: %o, receiverOpts: %O.\",\n          this._context.connectionId,\n          sropt,\n          rxopt\n        );\n        this._mgmtReqResLink = await RequestResponseLink.create(this._context.connection, sropt, rxopt);\n        this._mgmtReqResLink.sender.on(SenderEvents.senderError, (context: EventContext) => {\n          const id = context.connection.options.id;\n          const ehError = translate(context.sender!.error!);\n          log.error(\"[%s] An error occurred on the $management sender link.. %O\", id, ehError);\n        });\n        this._mgmtReqResLink.receiver.on(ReceiverEvents.receiverError, (context: EventContext) => {\n          const id = context.connection.options.id;\n          const ehError = translate(context.receiver!.error!);\n          log.error(\"[%s] An error occurred on the $management receiver link.. %O\", id, ehError);\n        });\n        log.mgmt(\n          \"[%s] Created sender '%s' and receiver '%s' links for $management endpoint.\",\n          this._context.connectionId,\n          this._mgmtReqResLink.sender.name,\n          this._mgmtReqResLink.receiver.name\n        );\n        await this._ensureTokenRenewal();\n      }\n    } catch (err) {\n      err = translate(err);\n      log.error(\"[%s] An error occured while establishing the $management links: %O\", this._context.connectionId, err);\n      throw err;\n    }\n  }\n\n  /**\n   * @private\n   * Helper method to make the management request\n   * @param {Connection} connection - The established amqp connection\n   * @param {string} type - The type of entity requested for. Valid values are \"eventhub\", \"partition\"\n   * @param {string | number} [partitionId] - The partitionId. Required only when type is \"partition\".\n   */\n  private async _makeManagementRequest(type: \"eventhub\" | \"partition\", partitionId?: string | number): Promise<any> {\n    if (partitionId != undefined && (typeof partitionId !== \"string\" && typeof partitionId !== \"number\")) {\n      throw new Error(\"'partitionId' is a required parameter and must be of type: 'string' | 'number'.\");\n    }\n    try {\n      const request: Message = {\n        body: Buffer.from(JSON.stringify([])),\n        message_id: uuid(),\n        reply_to: this.replyTo,\n        application_properties: {\n          operation: Constants.readOperation,\n          name: this.entityPath as string,\n          type: `${Constants.vendorString}:${type}`\n        }\n      };\n      if (partitionId != undefined && type === Constants.partition) {\n        request.application_properties!.partition = `${partitionId}`;\n      }\n      log.mgmt(\"[%s] Acquiring lock to get the management req res link.\", this._context.connectionId);\n      await defaultLock.acquire(this.managementLock, () => {\n        return this._init();\n      });\n      return (await this._mgmtReqResLink!.sendRequest(request)).body;\n    } catch (err) {\n      err = translate(err);\n      log.error(\"An error occurred while making the request to $management endpoint: %O\", err);\n      throw err;\n    }\n  }\n\n  private _isMgmtRequestResponseLinkOpen(): boolean {\n    return this._mgmtReqResLink! && this._mgmtReqResLink!.isOpen();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport * as log from \"./log\";\nimport * as os from \"os\";\nimport { packageJsonInfo } from \"./util/constants\";\nimport { EventHubReceiver } from \"./eventHubReceiver\";\nimport { EventHubSender } from \"./eventHubSender\";\nimport {\n  Constants,\n  delay,\n  ConnectionContextBase,\n  CreateConnectionContextBaseParameters,\n  EventHubConnectionConfig\n} from \"@azure/amqp-common\";\nimport { ManagementClient, ManagementClientOptions } from \"./managementClient\";\nimport { ClientOptions } from \"./eventHubClient\";\nimport { Dictionary, OnAmqpEvent, EventContext, ConnectionEvents } from \"rhea-promise\";\n\n/**\n * @interface ConnectionContext\n * @ignore\n * Provides contextual information like the underlying amqp connection, cbs session, management session,\n * tokenProvider, senders, receivers, etc. about the EventHub client.\n */\nexport interface ConnectionContext extends ConnectionContextBase {\n  /**\n   * @property {EventHubConnectionConfig} config The EventHub connection config that is created after\n   * parsing the connection string.\n   */\n  readonly config: EventHubConnectionConfig;\n  /**\n   * @property {boolean} wasConnectionCloseCalled Indicates whether the close() method was\n   * called on theconnection object.\n   */\n  wasConnectionCloseCalled: boolean;\n  /**\n   * @property {Dictionary<EventHubReceiver>} receivers A dictionary of the EventHub Receivers associated with this client.\n   */\n  receivers: Dictionary<EventHubReceiver>;\n  /**\n   * @property {Dictionary<EventHubSender>} senders A dictionary of the EventHub Senders associated with this client.\n   */\n  senders: Dictionary<EventHubSender>;\n  /**\n   * @property {ManagementClient} managementSession A reference to the management session ($management endpoint) on\n   * the underlying amqp connection for the EventHub Client.\n   */\n  managementSession?: ManagementClient;\n}\n\nexport interface ConnectionContextOptions extends ClientOptions {\n  managementSessionAddress?: string;\n  managementSessionAudience?: string;\n}\n\nexport namespace ConnectionContext {\n  /**\n   * @property {string} userAgent The user agent string for the EventHubs client.\n   * See guideline at https://github.com/Azure/azure-sdk/blob/master/docs/design/Telemetry.mdk\n   */\n  const userAgent: string = `azsdk-js-azureeventhubs/${packageJsonInfo.version} (NODE-VERSION ${\n    process.version\n  }; ${os.type()} ${os.release()})`;\n\n  export function getUserAgent(options: ConnectionContextOptions): string {\n    const finalUserAgent = options.userAgent ? `${userAgent},${options.userAgent}` : userAgent;\n    if (finalUserAgent.length > Constants.maxUserAgentLength) {\n      throw new Error(\n        `The user-agent string cannot be more than ${Constants.maxUserAgentLength} characters in length.` +\n          `The given user-agent string is: ${finalUserAgent} with length: ${finalUserAgent.length}`\n      );\n    }\n    return finalUserAgent;\n  }\n\n  export function create(config: EventHubConnectionConfig, options?: ConnectionContextOptions): ConnectionContext {\n    if (!options) options = {};\n\n    const parameters: CreateConnectionContextBaseParameters = {\n      config: config,\n      tokenProvider: options.tokenProvider,\n      dataTransformer: options.dataTransformer,\n      isEntityPathRequired: true,\n      connectionProperties: {\n        product: \"MSJSClient\",\n        userAgent: getUserAgent(options),\n        version: packageJsonInfo.version\n      }\n    };\n    // Let us create the base context and then add EventHub specific ConnectionContext properties.\n    const connectionContext = ConnectionContextBase.create(parameters) as ConnectionContext;\n    connectionContext.wasConnectionCloseCalled = false;\n    connectionContext.senders = {};\n    connectionContext.receivers = {};\n    const mOptions: ManagementClientOptions = {\n      address: options.managementSessionAddress,\n      audience: options.managementSessionAudience\n    };\n    connectionContext.managementSession = new ManagementClient(connectionContext, mOptions);\n\n    // Define listeners to be added to the connection object for\n    // \"connection_open\" and \"connection_error\" events.\n    const onConnectionOpen: OnAmqpEvent = (context: EventContext) => {\n      connectionContext.wasConnectionCloseCalled = false;\n      log.context(\n        \"[%s] setting 'wasConnectionCloseCalled' property of connection context to %s.\",\n        connectionContext.connection.id,\n        connectionContext.wasConnectionCloseCalled\n      );\n    };\n\n    const disconnected: OnAmqpEvent = async (context: EventContext) => {\n      const connectionError = context.connection && context.connection.error ? context.connection.error : undefined;\n      if (connectionError) {\n        log.error(\n          \"[%s] Error (context.connection.error) occurred on the amqp connection: %O\",\n          connectionContext.connection.id,\n          connectionError\n        );\n      }\n      const contextError = context.error;\n      if (contextError) {\n        log.error(\n          \"[%s] Error (context.error) occurred on the amqp connection: %O\",\n          connectionContext.connection.id,\n          contextError\n        );\n      }\n      const state: Readonly<{\n        wasConnectionCloseCalled: boolean;\n        numSenders: number;\n        numReceivers: number;\n      }> = {\n        wasConnectionCloseCalled: connectionContext.wasConnectionCloseCalled,\n        numSenders: Object.keys(connectionContext.senders).length,\n        numReceivers: Object.keys(connectionContext.receivers).length\n      };\n\n      // Clear internal map maintained by rhea to avoid reconnecting of old links once the\n      // connection is back up.\n      connectionContext.connection.removeAllSessions();\n\n      // Close the cbs session to ensure all the event handlers are released.\n      await connectionContext.cbsSession.close();\n      // Close the management session to ensure all the event handlers are released.\n      await connectionContext.managementSession!.close();\n\n      // The connection should always be brought back up if the sdk did not call connection.close()\n      // and there was atleast one sender/receiver link on the connection before it went down.\n      log.error(\"[%s] state: %O\", connectionContext.connection.id, state);\n      if (!state.wasConnectionCloseCalled && (state.numSenders || state.numReceivers)) {\n        log.error(\n          \"[%s] connection.close() was not called from the sdk and there were some \" +\n            \"sender or receiver links or both. We should reconnect.\",\n          connectionContext.connection.id\n        );\n        await delay(Constants.connectionReconnectDelay);\n        // reconnect senders if any\n        for (const senderName of Object.keys(connectionContext.senders)) {\n          const sender = connectionContext.senders[senderName];\n          if (!sender.isConnecting) {\n            log.error(\n              \"[%s] calling detached on sender '%s' with address '%s'.\",\n              connectionContext.connection.id,\n              sender.name,\n              sender.address\n            );\n            sender.detached(connectionError || contextError).catch(err => {\n              log.error(\n                \"[%s] An error occurred while reconnecting the sender '%s' with adress '%s' %O.\",\n                connectionContext.connection.id,\n                sender.name,\n                sender.address,\n                err\n              );\n            });\n          } else {\n            log.error(\n              \"[%s] sender '%s' with address '%s' is already reconnecting. Hence not \" +\n                \"calling detached on the sender.\",\n              connectionContext.connection.id,\n              sender.name,\n              sender.address\n            );\n          }\n        }\n        // reconnect receivers if any\n        for (const receiverName of Object.keys(connectionContext.receivers)) {\n          const receiver = connectionContext.receivers[receiverName];\n          if (!receiver.isConnecting) {\n            log.error(\n              \"[%s] calling detached on receiver '%s' with address '%s'.\",\n              connectionContext.connection.id,\n              receiver.name,\n              receiver.address\n            );\n            receiver.detached(connectionError || contextError).catch(err => {\n              log.error(\n                \"[%s] An error occurred while reconnecting the receiver '%s' with adress '%s' %O.\",\n                connectionContext.connection.id,\n                receiver.name,\n                receiver.address,\n                err\n              );\n            });\n          } else {\n            log.error(\n              \"[%s] receiver '%s' with address '%s' is already reconnecting. Hence not \" +\n                \"calling detached on the receiver.\",\n              connectionContext.connection.id,\n              receiver.name,\n              receiver.address\n            );\n          }\n        }\n      }\n    };\n\n    const protocolError: OnAmqpEvent = async (context: EventContext) => {\n      if (context.connection && context.connection.error) {\n        log.error(\n          \"[%s] Error (context.connection.error) occurred on the amqp connection: %O\",\n          connectionContext.connection.id,\n          context.connection && context.connection.error\n        );\n      }\n      if (context.error) {\n        log.error(\n          \"[%s] Error (context.error) occurred on the amqp connection: %O\",\n          connectionContext.connection.id,\n          context.error\n        );\n      }\n    };\n\n    const error: OnAmqpEvent = async (context: EventContext) => {\n      if (context.connection && context.connection.error) {\n        log.error(\n          \"[%s] Error (context.connection.error) occurred on the amqp connection: %O\",\n          connectionContext.connection.id,\n          context.connection && context.connection.error\n        );\n      }\n      if (context.error) {\n        log.error(\n          \"[%s] Error (context.error) occurred on the amqp connection: %O\",\n          connectionContext.connection.id,\n          context.error\n        );\n      }\n    };\n\n    // Add listeners on the connection object.\n    connectionContext.connection.on(ConnectionEvents.connectionOpen, onConnectionOpen);\n    connectionContext.connection.on(ConnectionEvents.disconnected, disconnected);\n    connectionContext.connection.on(ConnectionEvents.protocolError, protocolError);\n    connectionContext.connection.on(ConnectionEvents.error, error);\n\n    log.context(\"[%s] Created connection context successfully.\", connectionContext.connectionId);\n    return connectionContext;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport uuid from \"uuid/v4\";\nimport * as log from \"./log\";\nimport {\n  messageProperties,\n  Sender,\n  EventContext,\n  OnAmqpEvent,\n  SenderOptions,\n  Delivery,\n  SenderEvents,\n  message,\n  AmqpError\n} from \"rhea-promise\";\nimport {\n  defaultLock,\n  Func,\n  retry,\n  translate,\n  AmqpMessage,\n  ErrorNameConditionMapper,\n  RetryConfig,\n  RetryOperationType,\n  Constants,\n  randomNumberFromInterval\n} from \"@azure/amqp-common\";\nimport { EventData } from \"./eventData\";\nimport { ConnectionContext } from \"./connectionContext\";\nimport { LinkEntity } from \"./linkEntity\";\n\ninterface CreateSenderOptions {\n  newName?: boolean;\n}\n\n/**\n * Describes the EventHubSender that will send event data to EventHub.\n * @class EventHubSender\n * @ignore\n */\nexport class EventHubSender extends LinkEntity {\n  /**\n   * @property {string} senderLock The unqiue lock name per connection that is used to acquire the\n   * lock for establishing a sender link by an entity on that connection.\n   * @readonly\n   */\n  readonly senderLock: string = `sender-${uuid()}`;\n  /**\n   * @property {OnAmqpEvent} _onAmqpError The handler function to handle errors that happen on the\n   * underlying sender.\n   * @readonly\n   */\n  private readonly _onAmqpError: OnAmqpEvent;\n  /**\n   * @property {OnAmqpEvent} _onAmqpClose The handler function to handle \"sender_close\" event\n   * that happens on the underlying sender.\n   * @readonly\n   */\n  private readonly _onAmqpClose: OnAmqpEvent;\n  /**\n   * @property {OnAmqpEvent} _onSessionError The message handler that will be set as the handler on\n   * the underlying rhea sender's session for the \"session_error\" event.\n   * @private\n   */\n  private _onSessionError: OnAmqpEvent;\n  /**\n   * @property {OnAmqpEvent} _onSessionClose The message handler that will be set as the handler on\n   * the underlying rhea sender's session for the \"session_close\" event.\n   * @private\n   */\n  private _onSessionClose: OnAmqpEvent;\n  /**\n   * @property {Sender} [_sender] The AMQP sender link.\n   * @private\n   */\n  private _sender?: Sender;\n\n  /**\n   * Creates a new EventHubSender instance.\n   * @ignore\n   * @constructor\n   * @param {ConnectionContext} context The connection context.\n   * @param {string|number} [partitionId] The EventHub partition id to which the sender\n   * wants to send the event data.\n   */\n  constructor(context: ConnectionContext, partitionId?: string | number, name?: string) {\n    super(context, { name: name, partitionId: partitionId });\n    this.address = context.config.getSenderAddress(partitionId);\n    this.audience = context.config.getSenderAudience(partitionId);\n\n    this._onAmqpError = (context: EventContext) => {\n      const senderError = context.sender && context.sender.error;\n      if (senderError) {\n        const err = translate(senderError);\n        log.error(\"[%s] An error occurred for sender '%s': %O.\", this._context.connectionId, this.name, err);\n      }\n    };\n\n    this._onSessionError = (context: EventContext) => {\n      const sessionError = context.session && context.session.error;\n      if (sessionError) {\n        const err = translate(sessionError);\n        log.error(\n          \"[%s] An error occurred on the session of sender '%s': %O.\",\n          this._context.connectionId,\n          this.name,\n          err\n        );\n      }\n    };\n\n    this._onAmqpClose = async (context: EventContext) => {\n      const sender = this._sender || context.sender!;\n      const senderError = context.sender && context.sender.error;\n      if (senderError) {\n        log.error(\n          \"[%s] 'sender_close' event occurred for sender '%s' with address '%s'. \" + \"The associated error is: %O\",\n          this._context.connectionId,\n          this.name,\n          this.address,\n          senderError\n        );\n      }\n      if (sender && !sender.isItselfClosed()) {\n        if (!this.isConnecting) {\n          log.error(\n            \"[%s] 'sender_close' event occurred on the sender '%s' with address '%s' \" +\n              \"and the sdk did not initiate this. The sender is not reconnecting. Hence, calling \" +\n              \"detached from the _onAmqpClose() handler.\",\n            this._context.connectionId,\n            this.name,\n            this.address\n          );\n          await this.detached(senderError);\n        } else {\n          log.error(\n            \"[%s] 'sender_close' event occurred on the sender '%s' with address '%s' \" +\n              \"and the sdk did not initate this. Moreover the sender is already re-connecting. \" +\n              \"Hence not calling detached from the _onAmqpClose() handler.\",\n            this._context.connectionId,\n            this.name,\n            this.address\n          );\n        }\n      } else {\n        log.error(\n          \"[%s] 'sender_close' event occurred on the sender '%s' with address '%s' \" +\n            \"because the sdk initiated it. Hence not calling detached from the _onAmqpClose\" +\n            \"() handler.\",\n          this._context.connectionId,\n          this.name,\n          this.address\n        );\n      }\n    };\n\n    this._onSessionClose = async (context: EventContext) => {\n      const sender = this._sender || context.sender!;\n      const sessionError = context.session && context.session.error;\n      if (sessionError) {\n        log.error(\n          \"[%s] 'session_close' event occurred for sender '%s' with address '%s'. \" + \"The associated error is: %O\",\n          this._context.connectionId,\n          this.name,\n          this.address,\n          sessionError\n        );\n      }\n      if (sender && !sender.isSessionItselfClosed()) {\n        if (!this.isConnecting) {\n          log.error(\n            \"[%s] 'session_close' event occurred on the session of sender '%s' with \" +\n              \"address '%s' and the sdk did not initiate this. Hence calling detached from the \" +\n              \"_onSessionClose() handler.\",\n            this._context.connectionId,\n            this.name,\n            this.address\n          );\n          await this.detached(sessionError);\n        } else {\n          log.error(\n            \"[%s] 'session_close' event occurred on the session of sender '%s' with \" +\n              \"address '%s' and the sdk did not initiate this. Moreover the sender is already \" +\n              \"re-connecting. Hence not calling detached from the _onSessionClose() handler.\",\n            this._context.connectionId,\n            this.name,\n            this.address\n          );\n        }\n      } else {\n        log.error(\n          \"[%s] 'session_close' event occurred on the session of sender '%s' with address \" +\n            \"'%s' because the sdk initiated it. Hence not calling detached from the _onSessionClose\" +\n            \"() handler.\",\n          this._context.connectionId,\n          this.name,\n          this.address\n        );\n      }\n    };\n  }\n\n  /**\n   * Will reconnect the sender link if necessary.\n   * @ignore\n   * @param {AmqpError | Error} [senderError] The sender error if any.\n   * @returns {Promise<void>} Promise<void>.\n   */\n  async detached(senderError?: AmqpError | Error): Promise<void> {\n    try {\n      const wasCloseInitiated = this._sender && this._sender.isItselfClosed();\n      // Clears the token renewal timer. Closes the link and its session if they are open.\n      // Removes the link and its session if they are present in rhea's cache.\n      await this._closeLink(this._sender);\n      // We should attempt to reopen only when the sender(sdk) did not initiate the close\n      let shouldReopen = false;\n      if (senderError && !wasCloseInitiated) {\n        const translatedError = translate(senderError);\n        if (translatedError.retryable) {\n          shouldReopen = true;\n          log.error(\n            \"[%s] close() method of Sender '%s' with address '%s' was not called. There \" +\n              \"was an accompanying error an it is retryable. This is a candidate for re-establishing \" +\n              \"the sender link.\",\n            this._context.connectionId,\n            this.name,\n            this.address\n          );\n        } else {\n          log.error(\n            \"[%s] close() method of Sender '%s' with address '%s' was not called. There \" +\n              \"was an accompanying error and it is NOT retryable. Hence NOT re-establishing \" +\n              \"the sender link.\",\n            this._context.connectionId,\n            this.name,\n            this.address\n          );\n        }\n      } else if (!wasCloseInitiated) {\n        shouldReopen = true;\n        log.error(\n          \"[%s] close() method of Sender '%s' with address '%s' was not called. There \" +\n            \"was no accompanying error as well. This is a candidate for re-establishing \" +\n            \"the sender link.\",\n          this._context.connectionId,\n          this.name,\n          this.address\n        );\n      } else {\n        const state: any = {\n          wasCloseInitiated: wasCloseInitiated,\n          senderError: senderError,\n          _sender: this._sender\n        };\n        log.error(\n          \"[%s] Something went wrong. State of sender '%s' with address '%s' is: %O\",\n          this._context.connectionId,\n          this.name,\n          this.address,\n          state\n        );\n      }\n      if (shouldReopen) {\n        await defaultLock.acquire(this.senderLock, () => {\n          const options: SenderOptions = this._createSenderOptions({\n            newName: true\n          });\n          // shall retry forever at an interval of 15 seconds if the error is a retryable error\n          // else bail out when the error is not retryable or the oepration succeeds.\n          const config: RetryConfig<void> = {\n            operation: () => this._init(options),\n            connectionId: this._context.connectionId,\n            operationType: RetryOperationType.senderLink,\n            times: Constants.defaultConnectionRetryAttempts,\n            connectionHost: this._context.config.host,\n            delayInSeconds: 15\n          };\n          return retry<void>(config);\n        });\n      }\n    } catch (err) {\n      log.error(\n        \"[%s] An error occurred while processing detached() of Sender '%s' with address \" + \"'%s': %O\",\n        this._context.connectionId,\n        this.name,\n        this.address,\n        err\n      );\n    }\n  }\n\n  /**\n   * Deletes the sender fromt the context. Clears the token renewal timer. Closes the sender link.\n   * @ignore\n   * @return {Promise<void>} Promise<void>\n   */\n  async close(): Promise<void> {\n    if (this._sender) {\n      const senderLink = this._sender;\n      this._deleteFromCache();\n      await this._closeLink(senderLink);\n    }\n  }\n\n  /**\n   * Determines whether the AMQP sender link is open. If open then returns true else returns false.\n   * @ignore\n   * @return {boolean} boolean\n   */\n  isOpen(): boolean {\n    const result: boolean = this._sender! && this._sender!.isOpen();\n    log.error(\n      \"[%s] Sender '%s' with address '%s' is open? -> %s\",\n      this._context.connectionId,\n      this.name,\n      this.address,\n      result\n    );\n    return result;\n  }\n\n  /**\n   * Sends the given message, with the given options on this link\n   * @ignore\n   * @param {any} data Message to send.  Will be sent as UTF8-encoded JSON string.\n   * @returns {Promise<Delivery>} Promise<Delivery>\n   */\n  async send(data: EventData): Promise<Delivery> {\n    try {\n      if (!data || (data && typeof data !== \"object\")) {\n        throw new Error(\"data is required and it must be of type object.\");\n      }\n\n      if (data.partitionKey && typeof data.partitionKey !== \"string\") {\n        throw new Error(\"'partitionKey' must be of type 'string'.\");\n      }\n\n      if (!this.isOpen()) {\n        log.sender(\n          \"Acquiring lock %s for initializing the session, sender and \" + \"possibly the connection.\",\n          this.senderLock\n        );\n        await defaultLock.acquire(this.senderLock, () => {\n          return this._init();\n        });\n      }\n      const message = EventData.toAmqpMessage(data);\n      message.body = this._context.dataTransformer.encode(data.body);\n      return await this._trySend(message, message.message_id);\n    } catch (err) {\n      log.error(\"An error occurred while sending the message %O\", err);\n      throw err;\n    }\n  }\n\n  /**\n   * Send a batch of EventData to the EventHub. The \"message_annotations\",\n   * \"application_properties\" and \"properties\" of the first message will be set as that\n   * of the envelope (batch message).\n   * @ignore\n   * @param {Array<EventData>} datas  An array of EventData objects to be sent in a Batch message.\n   * @return {Promise<Delivery>} Promise<Delivery>\n   */\n  async sendBatch(datas: EventData[]): Promise<Delivery> {\n    try {\n      if (!datas || (datas && !Array.isArray(datas))) {\n        throw new Error(\"data is required and it must be an Array.\");\n      }\n\n      if (!this.isOpen()) {\n        log.sender(\n          \"Acquiring lock %s for initializing the session, sender and \" + \"possibly the connection.\",\n          this.senderLock\n        );\n        await defaultLock.acquire(this.senderLock, () => {\n          return this._init();\n        });\n      }\n      log.sender(\"[%s] Sender '%s', trying to send EventData[].\", this._context.connectionId, this.name);\n      const messages: AmqpMessage[] = [];\n      // Convert EventData to AmqpMessage.\n      for (let i = 0; i < datas.length; i++) {\n        const message = EventData.toAmqpMessage(datas[i]);\n        message.body = this._context.dataTransformer.encode(datas[i].body);\n        messages[i] = message;\n      }\n      // Encode every amqp message and then convert every encoded message to amqp data section\n      const batchMessage: AmqpMessage = {\n        body: message.data_sections(messages.map(message.encode))\n      };\n      // Set message_annotations, application_properties and properties of the first message as\n      // that of the envelope (batch message).\n      if (messages[0].message_annotations) {\n        batchMessage.message_annotations = messages[0].message_annotations;\n      }\n      if (messages[0].application_properties) {\n        batchMessage.application_properties = messages[0].application_properties;\n      }\n      for (const prop of messageProperties) {\n        if ((messages[0] as any)[prop]) {\n          (batchMessage as any)[prop] = (messages[0] as any)[prop];\n        }\n      }\n\n      // Finally encode the envelope (batch message).\n      const encodedBatchMessage = message.encode(batchMessage);\n      log.sender(\n        \"[%s] Sender '%s', sending encoded batch message.\",\n        this._context.connectionId,\n        this.name,\n        encodedBatchMessage\n      );\n      return await this._trySend(encodedBatchMessage, batchMessage.message_id, 0x80013700);\n    } catch (err) {\n      log.error(\"An error occurred while sending the batch message %O\", err);\n      throw err;\n    }\n  }\n\n  private _deleteFromCache(): void {\n    this._sender = undefined;\n    delete this._context.senders[this.address];\n    log.error(\n      \"[%s] Deleted the sender '%s' with address '%s' from the client cache.\",\n      this._context.connectionId,\n      this.name,\n      this.address\n    );\n  }\n\n  private _createSenderOptions(options: CreateSenderOptions): SenderOptions {\n    if (options.newName) this.name = `${uuid()}`;\n    const srOptions: SenderOptions = {\n      name: this.name,\n      target: {\n        address: this.address\n      },\n      onError: this._onAmqpError,\n      onClose: this._onAmqpClose,\n      onSessionError: this._onSessionError,\n      onSessionClose: this._onSessionClose\n    };\n    log.sender(\"Creating sender with options: %O\", srOptions);\n    return srOptions;\n  }\n\n  /**\n   * Tries to send the message to EventHub if there is enough credit to send them\n   * and the circular buffer has available space to settle the message after sending them.\n   *\n   * We have implemented a synchronous send over here in the sense that we shall be waiting\n   * for the message to be accepted or rejected and accordingly resolve or reject the promise.\n   * @ignore\n   * @param message The message to be sent to EventHub.\n   * @return {Promise<Delivery>} Promise<Delivery>\n   */\n  private _trySend(message: AmqpMessage | Buffer, tag: any, format?: number): Promise<Delivery> {\n    const sendEventPromise = () =>\n      new Promise<Delivery>((resolve, reject) => {\n        let waitTimer: any;\n        log.sender(\n          \"[%s] Sender '%s', credit: %d available: %d\",\n          this._context.connectionId,\n          this.name,\n          this._sender!.credit,\n          this._sender!.session.outgoing.available()\n        );\n        if (this._sender!.sendable()) {\n          log.sender(\n            \"[%s] Sender '%s', sending message with id '%s'.\",\n            this._context.connectionId,\n            this.name,\n            (Buffer.isBuffer(message) ? tag : message.message_id) || tag || \"<not specified>\"\n          );\n          let onRejected: Func<EventContext, void>;\n          let onReleased: Func<EventContext, void>;\n          let onModified: Func<EventContext, void>;\n          let onAccepted: Func<EventContext, void>;\n          const removeListeners = (): void => {\n           clearTimeout(waitTimer);\n           // When `removeListeners` is called on timeout, the sender might be closed and cleared\n           // So, check if it exists, before removing listeners from it.\n           if (this._sender) {\n            this._sender.removeListener(SenderEvents.rejected, onRejected);\n            this._sender.removeListener(SenderEvents.accepted, onAccepted);\n            this._sender.removeListener(SenderEvents.released, onReleased);\n            this._sender.removeListener(SenderEvents.modified, onModified);\n           }\n          };\n\n          onAccepted = (context: EventContext) => {\n            // Since we will be adding listener for accepted and rejected event every time\n            // we send a message, we need to remove listener for both the events.\n            // This will ensure duplicate listeners are not added for the same event.\n            removeListeners();\n            log.sender(\"[%s] Sender '%s', got event accepted.\", this._context.connectionId, this.name);\n            resolve(context.delivery);\n          };\n          onRejected = (context: EventContext) => {\n            removeListeners();\n            log.error(\"[%s] Sender '%s', got event rejected.\", this._context.connectionId, this.name);\n            const err = translate(context!.delivery!.remote_state!.error);\n            log.error(err);\n            reject(err);\n          };\n          onReleased = (context: EventContext) => {\n            removeListeners();\n            log.error(\"[%s] Sender '%s', got event released.\", this._context.connectionId, this.name);\n            let err: Error;\n            if (context!.delivery!.remote_state!.error) {\n              err = translate(context!.delivery!.remote_state!.error);\n            } else {\n              err = new Error(\n                `[${this._context.connectionId}] Sender '${this.name}', ` +\n                  `received a release disposition.Hence we are rejecting the promise.`\n              );\n            }\n            log.error(err);\n            reject(err);\n          };\n          onModified = (context: EventContext) => {\n            removeListeners();\n            log.error(\"[%s] Sender '%s', got event modified.\", this._context.connectionId, this.name);\n            let err: Error;\n            if (context!.delivery!.remote_state!.error) {\n              err = translate(context!.delivery!.remote_state!.error);\n            } else {\n              err = new Error(\n                `[${this._context.connectionId}] Sender \"${this.name}\", ` +\n                  `received a modified disposition.Hence we are rejecting the promise.`\n              );\n            }\n            log.error(err);\n            reject(err);\n          };\n\n          const actionAfterTimeout = () => {\n            removeListeners();\n            const desc: string =\n              `[${this._context.connectionId}] Sender \"${this.name}\" with ` +\n              `address \"${this.address}\", was not able to send the message right now, due ` +\n              `to operation timeout.`;\n            log.error(desc);\n            const e: AmqpError = {\n              condition: ErrorNameConditionMapper.ServiceUnavailableError,\n              description: desc\n            };\n            return reject(translate(e));\n          };\n\n          this._sender!.on(SenderEvents.accepted, onAccepted);\n          this._sender!.on(SenderEvents.rejected, onRejected);\n          this._sender!.on(SenderEvents.modified, onModified);\n          this._sender!.on(SenderEvents.released, onReleased);\n          waitTimer = setTimeout(actionAfterTimeout, Constants.defaultOperationTimeoutInSeconds * 1000);\n          const delivery = this._sender!.send(message, tag, format);\n          log.sender(\n            \"[%s] Sender '%s', sent message with delivery id: %d and tag: %s\",\n            this._context.connectionId,\n            this.name,\n            delivery.id,\n            delivery.tag.toString()\n          );\n        } else {\n          // let us retry to send the message after some time.\n          const msg =\n            `[${this._context.connectionId}] Sender \"${this.name}\", ` +\n            `cannot send the message right now. Please try later.`;\n          log.error(msg);\n          const amqpError: AmqpError = {\n            condition: ErrorNameConditionMapper.SenderBusyError,\n            description: msg\n          };\n          reject(translate(amqpError));\n        }\n      });\n\n    const jitterInSeconds = randomNumberFromInterval(1, 4);\n    const config: RetryConfig<Delivery> = {\n      operation: sendEventPromise,\n      connectionId: this._context.connectionId,\n      operationType: RetryOperationType.sendMessage,\n      times: Constants.defaultRetryAttempts,\n      delayInSeconds: Constants.defaultDelayBetweenOperationRetriesInSeconds + jitterInSeconds\n    };\n    return retry<Delivery>(config);\n  }\n\n  /**\n   * Initializes the sender session on the connection.\n   * @ignore\n   * @returns {Promise<void>}\n   */\n  private async _init(options?: SenderOptions): Promise<void> {\n    try {\n      // isOpen isConnecting  Should establish\n      // true     false          No\n      // true     true           No\n      // false    true           No\n      // false    false          Yes\n      if (!this.isOpen() && !this.isConnecting) {\n        log.error(\n          \"[%s] The sender '%s' with address '%s' is not open and is not currently \" +\n            \"establishing itself. Hence let's try to connect.\",\n          this._context.connectionId,\n          this.name,\n          this.address\n        );\n        this.isConnecting = true;\n        await this._negotiateClaim();\n        log.error(\"[%s] Trying to create sender '%s'...\", this._context.connectionId, this.name);\n        if (!options) {\n          options = this._createSenderOptions({});\n        }\n        this._sender = await this._context.connection.createSender(options);\n        this.isConnecting = false;\n        log.error(\n          \"[%s] Sender '%s' with address '%s' has established itself.\",\n          this._context.connectionId,\n          this.name,\n          this.address\n        );\n        this._sender.setMaxListeners(1000);\n        log.error(\n          \"[%s] Promise to create the sender resolved. Created sender with name: %s\",\n          this._context.connectionId,\n          this.name\n        );\n        log.error(\"[%s] Sender '%s' created with sender options: %O\", this._context.connectionId, this.name, options);\n        // It is possible for someone to close the sender and then start it again.\n        // Thus make sure that the sender is present in the client cache.\n        if (!this._context.senders[this.address]) this._context.senders[this.address] = this;\n        await this._ensureTokenRenewal();\n      } else {\n        log.error(\n          \"[%s] The sender '%s' with address '%s' is open -> %s and is connecting \" + \"-> %s. Hence not reconnecting.\",\n          this._context.connectionId,\n          this.name,\n          this.address,\n          this.isOpen(),\n          this.isConnecting\n        );\n      }\n    } catch (err) {\n      this.isConnecting = false;\n      err = translate(err);\n      log.error(\"[%s] An error occurred while creating the sender %s\", this._context.connectionId, this.name, err);\n      throw err;\n    }\n  }\n\n  /**\n   * Creates a new sender to the given event hub, and optionally to a given partition if it is\n   * not present in the context or returns the one present in the context.\n   * @ignore\n   * @static\n   * @param {(string|number)} [partitionId] Partition ID to which it will send event data.\n   * @returns {Promise<EventHubSender>}\n   */\n  static create(context: ConnectionContext, partitionId?: string | number): EventHubSender {\n    if (partitionId && typeof partitionId !== \"string\" && typeof partitionId !== \"number\") {\n      throw new Error(\"'partitionId' must be of type: 'string' | 'number'.\");\n    }\n\n    const ehSender: EventHubSender = new EventHubSender(context, partitionId);\n    if (!context.senders[ehSender.address]) {\n      context.senders[ehSender.address] = ehSender;\n    }\n    return context.senders[ehSender.address];\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { ReceiverEvents, EventContext, OnAmqpEvent, SessionEvents } from \"rhea-promise\";\nimport { translate, Func, Constants, MessagingError } from \"@azure/amqp-common\";\nimport { EventData } from \"./eventData\";\nimport { ReceiveOptions } from \"./eventHubClient\";\nimport { EventHubReceiver } from \"./eventHubReceiver\";\nimport { ConnectionContext } from \"./connectionContext\";\nimport * as log from \"./log\";\n\n/**\n * Describes the batching receiver where the user can receive a specified number of messages for a predefined time.\n * @class BatchingReceiver\n * @extends EventHubReceiver\n * @ignore\n */\nexport class BatchingReceiver extends EventHubReceiver {\n  /**\n   * Instantiate a new receiver from the AMQP `Receiver`. Used by `EventHubClient`.\n   * @ignore\n   * @constructor\n   * @param {ConnectionContext} context                        The connection context.\n   * @param {string} partitionId                               Partition ID from which to receive.\n   * @param {ReceiveOptions} [options]                         Options for how you'd like to connect.\n   */\n  constructor(context: ConnectionContext, partitionId: string | number, options?: ReceiveOptions) {\n    super(context, partitionId, options);\n  }\n\n  /**\n   * Receive a batch of EventData objects from an EventHub partition for a given count and\n   * a given max wait time in seconds, whichever happens first. This method can be used directly\n   * after creating the receiver object.\n   * @ignore\n   * @param {number} maxMessageCount The maximum message count. Must be a value greater than 0.\n   * @param {number} [maxWaitTimeInSeconds] The maximum wait time in seconds for which the Receiver\n   * should wait to receiver the said amount of messages. If not provided, it defaults to 60 seconds.\n   * @returns {Promise<EventData[]>} A promise that resolves with an array of EventData objects.\n   */\n  receive(maxMessageCount: number, maxWaitTimeInSeconds?: number): Promise<EventData[]> {\n    if (!maxMessageCount || (maxMessageCount && typeof maxMessageCount !== \"number\")) {\n      throw new Error(\"'maxMessageCount' is a required parameter of type number with a value greater than 0.\");\n    }\n\n    if (maxWaitTimeInSeconds == undefined) {\n      maxWaitTimeInSeconds = Constants.defaultOperationTimeoutInSeconds;\n    }\n\n    const eventDatas: EventData[] = [];\n    let timeOver = false;\n    return new Promise<EventData[]>((resolve, reject) => {\n      let onReceiveMessage: OnAmqpEvent;\n      let onReceiveError: OnAmqpEvent;\n      let onReceiveClose: OnAmqpEvent;\n      let onSessionError: OnAmqpEvent;\n      let onSessionClose: OnAmqpEvent;\n      let waitTimer: any;\n      let actionAfterWaitTimeout: Func<void, void>;\n      // Final action to be performed after maxMessageCount is reached or the maxWaitTime is over.\n      const finalAction = (timeOver: boolean, data?: EventData) => {\n        // Resetting the mode. Now anyone can call start() or receive() again.\n        if (this._receiver) {\n          this._receiver.removeListener(ReceiverEvents.receiverError, onReceiveError);\n          this._receiver.removeListener(ReceiverEvents.message, onReceiveMessage);\n        }\n        if (!data) {\n          data = eventDatas.length ? eventDatas[eventDatas.length - 1] : undefined;\n        }\n        if (!timeOver) {\n          clearTimeout(waitTimer);\n        }\n        if (this.receiverRuntimeMetricEnabled && data) {\n          this.runtimeInfo.lastSequenceNumber = data.lastSequenceNumber;\n          this.runtimeInfo.lastEnqueuedTimeUtc = data.lastEnqueuedTime;\n          this.runtimeInfo.lastEnqueuedOffset = data.lastEnqueuedOffset;\n          this.runtimeInfo.retrievalTime = data.retrievalTime;\n        }\n        resolve(eventDatas);\n      };\n\n      // Action to be performed after the max wait time is over.\n      actionAfterWaitTimeout = () => {\n        timeOver = true;\n        log.batching(\n          \"[%s] Batching Receiver '%s', %d messages received when max wait time in seconds %d is over.\",\n          this._context.connectionId,\n          this.name,\n          eventDatas.length,\n          maxWaitTimeInSeconds\n        );\n        return finalAction(timeOver);\n      };\n\n      // Action to be performed on the \"message\" event.\n      onReceiveMessage = (context: EventContext) => {\n        const data: EventData = EventData.fromAmqpMessage(context.message!);\n        data.body = this._context.dataTransformer.decode(context.message!.body);\n        if (eventDatas.length <= maxMessageCount) {\n          eventDatas.push(data);\n        }\n        if (eventDatas.length === maxMessageCount) {\n          log.batching(\n            \"[%s] Batching Receiver '%s', %d messages received within %d seconds.\",\n            this._context.connectionId,\n            this.name,\n            eventDatas.length,\n            maxWaitTimeInSeconds\n          );\n          finalAction(timeOver, data);\n        }\n      };\n\n      // Action to be taken when an error is received.\n      onReceiveError = (context: EventContext) => {\n        const receiver = this._receiver || context.receiver!;\n        receiver.removeListener(ReceiverEvents.receiverError, onReceiveError);\n        receiver.removeListener(ReceiverEvents.message, onReceiveMessage);\n        receiver.session.removeListener(SessionEvents.sessionError, onSessionError);\n\n        const receiverError = context.receiver && context.receiver.error;\n        let error = new MessagingError(\"An error occuured while receiving messages.\");\n        if (receiverError) {\n          error = translate(receiverError);\n          log.error(\"[%s] Receiver '%s' received an error:\\n%O\", this._context.connectionId, this.name, error);\n        }\n        if (waitTimer) {\n          clearTimeout(waitTimer);\n        }\n        reject(error);\n      };\n\n      onReceiveClose = async (context: EventContext) => {\n        const receiverError = context.receiver && context.receiver.error;\n        if (receiverError) {\n          log.error(\n            \"[%s] 'receiver_close' event occurred. The associated error is: %O\",\n            this._context.connectionId,\n            receiverError\n          );\n        }\n      };\n\n      onSessionClose = async (context: EventContext) => {\n        const sessionError = context.session && context.session.error;\n        if (sessionError) {\n          log.error(\n            \"[%s] 'session_close' event occurred for receiver '%s'. The associated error is: %O\",\n            this._context.connectionId,\n            this.name,\n            sessionError\n          );\n        }\n      };\n\n      onSessionError = (context: EventContext) => {\n        const receiver = this._receiver || context.receiver!;\n        receiver.removeListener(ReceiverEvents.receiverError, onReceiveError);\n        receiver.removeListener(ReceiverEvents.message, onReceiveMessage);\n        receiver.session.removeListener(SessionEvents.sessionError, onReceiveError);\n        const sessionError = context.session && context.session.error;\n        let error = new MessagingError(\"An error occuured while receiving messages.\");\n        if (sessionError) {\n          error = translate(sessionError);\n          log.error(\n            \"[%s] 'session_close' event occurred for Receiver '%s' received an error:\\n%O\",\n            this._context.connectionId,\n            this.name,\n            error\n          );\n        }\n        if (waitTimer) {\n          clearTimeout(waitTimer);\n        }\n        reject(error);\n      };\n\n      const addCreditAndSetTimer = (reuse?: boolean) => {\n        log.batching(\n          \"[%s] Receiver '%s', adding credit for receiving %d messages.\",\n          this._context.connectionId,\n          this.name,\n          maxMessageCount\n        );\n        this._receiver!.addCredit(maxMessageCount);\n        let msg: string = \"[%s] Setting the wait timer for %d seconds for receiver '%s'.\";\n        if (reuse) msg += \" Receiver link already present, hence reusing it.\";\n        log.batching(msg, this._context.connectionId, maxWaitTimeInSeconds, this.name);\n        waitTimer = setTimeout(actionAfterWaitTimeout, (maxWaitTimeInSeconds as number) * 1000);\n      };\n\n      if (!this.isOpen()) {\n        log.batching(\"[%s] Receiver '%s', setting the prefetch count to 0.\", this._context.connectionId, this.name);\n        this.prefetchCount = 0;\n        const rcvrOptions = this._createReceiverOptions({\n          onMessage: onReceiveMessage,\n          onError: onReceiveError,\n          onClose: onReceiveClose,\n          onSessionError: onSessionError,\n          onSessionClose: onSessionClose\n        });\n        this._init(rcvrOptions)\n          .then(() => addCreditAndSetTimer())\n          .catch(reject);\n      } else {\n        addCreditAndSetTimer(true);\n        this._receiver!.on(ReceiverEvents.message, onReceiveMessage);\n        this._receiver!.on(ReceiverEvents.receiverError, onReceiveError);\n        this._receiver!.session.on(SessionEvents.sessionError, onReceiveError);\n      }\n    });\n  }\n\n  /**\n   * Creates a batching receiver.\n   * @static\n   * @ignore\n   * @param {ConnectionContext} context    The connection context.\n   * @param {string | number} partitionId  The partitionId to receive events from.\n   * @param {ReceiveOptions} [options]     Receive options.\n   */\n  static create(context: ConnectionContext, partitionId: string | number, options?: ReceiveOptions): BatchingReceiver {\n    const bReceiver = new BatchingReceiver(context, partitionId, options);\n    context.receivers[bReceiver.name] = bReceiver;\n    return bReceiver;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { translate, MessagingError, IotSasTokenProvider } from \"@azure/amqp-common\";\nimport { IotHubConnectionConfig } from \"@azure/amqp-common\";\nimport { ConnectionContext, ConnectionContextOptions } from \"../connectionContext\";\nimport * as log from \"../log\";\n\n/**\n * @interface ParsedRedirectError\n * @ignore\n */\nexport interface ParsedRedirectError {\n  endpoint: string;\n  entityPath: string;\n}\n/**\n * @interface EHConfig\n * @ignore\n */\nexport interface EHConfig extends ParsedRedirectError {\n  sharedAccessKey: string;\n  sharedAccessKeyName: string;\n}\n/**\n * @class IotHubClient\n * @ignore\n */\nexport class IotHubClient {\n  /**\n   * @property {string} connectionString the IotHub connection string.\n   */\n  connectionString: string;\n\n  constructor(connectionString: string) {\n    this.connectionString = connectionString;\n  }\n  /**\n   * Constructs the EventHub connection string by catching the redirect error and parsing the error\n   * information.\n   * @ignore\n   * @param {ConnectionContextOptions} [options] optional parameters to be provided while creating\n   * the connection context.\n   * @return {Promise<string>} Promise<string>\n   */\n  async getEventHubConnectionString(options?: ConnectionContextOptions): Promise<string> {\n    const iothubconfig = IotHubConnectionConfig.create(this.connectionString);\n    const config = IotHubConnectionConfig.convertToEventHubConnectionConfig(iothubconfig);\n    let result: string = \"\";\n    if (!options) options = {};\n    options.tokenProvider = new IotSasTokenProvider(\n      config.endpoint,\n      config.sharedAccessKeyName,\n      config.sharedAccessKey\n    );\n    options.managementSessionAddress = `/messages/events/$management`;\n    const context = ConnectionContext.create(config, options);\n    try {\n      log.iotClient(\"Getting the hub runtime info from the iothub connection string to get the redirect error.\");\n      await context.managementSession!.getHubRuntimeInformation();\n    } catch (err) {\n      const error = translate(err);\n      log.error(\"IotHubClient received the error: %O\", error);\n      const parsedInfo: ParsedRedirectError = this._parseRedirectError(err);\n      log.error(\"Parsed info from redirect error is: %O\", parsedInfo);\n      result = this._buildConnectionString({\n        sharedAccessKey: config.sharedAccessKey,\n        sharedAccessKeyName: config.sharedAccessKeyName,\n        endpoint: parsedInfo.endpoint,\n        entityPath: parsedInfo.entityPath\n      });\n    }\n    log.iotClient(\"The EventHub ConnectionString is: '%s'.\", result);\n    await this.close(context);\n    return result;\n  }\n\n  /**\n   * Closes the AMQP connection to the Event Hub for this client,\n   * returning a promise that will be resolved when disconnection is completed.\n   * @ignore\n   * @returns {Promise<any>}\n   */\n  async close(context: ConnectionContext): Promise<any> {\n    try {\n      if (context.connection.isOpen()) {\n        log.iotClient(\"Closing the IotHubClient connection...\");\n        // Close the cbs session;\n        await context.cbsSession.close();\n        log.iotClient(\"IotHub cbs session closed.\");\n        // Close the management session\n        await context.managementSession!.close();\n        log.iotClient(\"IotHub management client closed.\");\n        await context.connection.close();\n        log.iotClient(\"Closed the amqp connection '%s' on the iothub client.\", context.connectionId);\n      }\n    } catch (err) {\n      const msg = `An error occurred while closing the connection \"${context.connectionId}\": ${err.stack}`;\n      log.error(msg);\n    }\n  }\n\n  private _parseRedirectError(error: MessagingError): ParsedRedirectError {\n    if (!error) {\n      throw new Error(\"'error' is a required parameter and must be of type 'object'.\");\n    }\n    if (error.name !== \"LinkRedirectError\" || !error.info) {\n      throw error;\n    }\n    if (!error.info.hostname || !error.info.address) {\n      const msg = `The received redirect error from IotHub is malformed. ${error.stack}\\n${error.info}`;\n      throw new Error(msg);\n    }\n\n    const address: string = error.info.address;\n    const parsedResult = address.match(/5671\\/(.*)\\/\\$management/i);\n    if (parsedResult == undefined || (parsedResult && parsedResult[1] == undefined)) {\n      const msg =\n        `Cannot parse the EventHub name from the given address: ${address} in the error: ` +\n        `${error.stack}\\n${JSON.stringify(error.info)}.\\nThe parsed result is: ${JSON.stringify(parsedResult)}.`;\n      throw new Error(msg);\n    }\n\n    return {\n      endpoint: error.info.hostname,\n      entityPath: parsedResult[1]\n    };\n  }\n\n  private _buildConnectionString(config: EHConfig): string {\n    const parts = new Map();\n    parts.set(\"Endpoint\", `sb://${config.endpoint}/`);\n    parts.set(\"SharedAccessKeyName\", config.sharedAccessKeyName);\n    parts.set(\"SharedAccessKey\", config.sharedAccessKey);\n    parts.set(\"EntityPath\", config.entityPath);\n    return Array.from(parts)\n      .map(part => `${part[0]}=${part[1]}`)\n      .join(\";\");\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport * as log from \"./log\";\nimport { Delivery, WebSocketImpl } from \"rhea-promise\";\nimport {\n  ApplicationTokenCredentials,\n  DeviceTokenCredentials,\n  UserTokenCredentials,\n  MSITokenCredentials\n} from \"@azure/ms-rest-nodeauth\";\nimport {\n  MessagingError,\n  DataTransformer,\n  TokenProvider,\n  EventHubConnectionConfig,\n  AadTokenProvider\n} from \"@azure/amqp-common\";\nimport { OnMessage, OnError } from \"./eventHubReceiver\";\nimport { EventData } from \"./eventData\";\nimport { ConnectionContext } from \"./connectionContext\";\nimport { EventHubPartitionRuntimeInformation, EventHubRuntimeInformation } from \"./managementClient\";\nimport { EventPosition } from \"./eventPosition\";\nimport { EventHubSender } from \"./eventHubSender\";\nimport { StreamingReceiver, ReceiveHandler } from \"./streamingReceiver\";\nimport { BatchingReceiver } from \"./batchingReceiver\";\nimport { IotHubClient } from \"./iothub/iothubClient\";\n\n/**\n * Describes the options that one can set while receiving messages.\n * @interface ReceiveOptions\n */\nexport interface ReceiveOptions {\n  /**\n   * @property {string} [name] The name of the receiver. If not provided then we will set a GUID by default.\n   */\n  name?: string;\n  /**\n   * @property {object} [eventPosition] The starting event position at which to start receiving messages.\n   * This is used to filter messages for the EventHub Receiver.\n   */\n  eventPosition?: EventPosition;\n  /**\n   * @property {string} [consumerGroup] The consumer group to which the receiver wants to connect to.\n   * If not provided then it will be connected to \"$default\" consumer group.\n   */\n  consumerGroup?: string;\n  /**\n   * @property {number} [prefetchCount] The upper limit of events this receiver will actively receive\n   * regardless of whether a receive operation is pending. Defaults to 1000.\n   */\n  prefetchCount?: number;\n  /**\n   * @property {number} [epoch] The epoch value that this receiver is currently using for partition ownership.\n   */\n  epoch?: number;\n  /**\n   * @property {string} [identifier] The receiver identifier that uniqely identifies the receiver.\n   */\n  identifier?: string;\n  /**\n   * @property {boolean} [enableReceiverRuntimeMetric] A value indicating whether the runtime metric of a receiver is enabled.\n   */\n  enableReceiverRuntimeMetric?: boolean;\n}\n\n/**\n * Describes the base client options.\n * @interface ClientOptionsBase\n */\nexport interface ClientOptionsBase {\n  /**\n   * @property {DataTransformer} [dataTransformer] The data transformer that will be used to encode\n   * and decode the sent and received messages respectively. If not provided then we will use the\n   * DefaultDataTransformer. The default transformer should handle majority of the cases. This\n   * option needs to be used only for specialized scenarios.\n   */\n  dataTransformer?: DataTransformer;\n  /**\n   * @property {string} [userAgent] The user agent that needs to be appended to the built in\n   * user agent string.\n   */\n  userAgent?: string;\n  /**\n   * @property The WebSocket constructor used to create an AMQP connection over a WebSocket.\n   * This option should be provided in the below scenarios\n   * - The TCP port 5671 which is what is used by the AMQP connection to Event Hubs is blocked in your environment.\n   * - Your application needs to be run behind a proxy server\n   * - Your application needs to run in the browser and you want to provide your own choice of Websocket implementation\n   * instead of the built-in WebSocket in the browser.\n   */\n   webSocket?: WebSocketImpl;\n  /**\n   * @property {webSocketConstructorOptions} - Options to be passed to the WebSocket constructor\n   */\n   webSocketConstructorOptions?: any;\n}\n\n/**\n * Describes the options that can be provided while creating the EventHub Client.\n * @interface ClientOptions\n */\nexport interface ClientOptions extends ClientOptionsBase {\n  /**\n   * @property {TokenProvider} [tokenProvider] - The token provider that provides the token for authentication.\n   * Default value: SasTokenProvider.\n   */\n  tokenProvider?: TokenProvider;\n}\n\n/**\n * @class EventHubClient\n * Describes the EventHub client.\n */\nexport class EventHubClient {\n  /**\n   * @property {string} [connectionId] The amqp connection id that uniquely identifies the connection within a process.\n   */\n  connectionId?: string;\n\n  /**\n   * @property {string} eventhubName The name of the Eventhub.\n   * @readonly\n   */\n  get eventhubName(): string {\n    return this._context.config.entityPath!;\n  }\n\n  /**\n   * @property {ConnectionContext} _context Describes the amqp connection context for the eventhub client.\n   * @private\n   */\n  private _context: ConnectionContext;\n\n  /**\n   * Instantiates a client pointing to the Event Hub given by this configuration.\n   *\n   * @constructor\n   * @param {EventHubConnectionConfig} config - The connection configuration to create the EventHub Client.\n   * @param {ClientOptions} options - The optional parameters that can be provided to the EventHub\n   * Client constructor.\n   */\n  constructor(config: EventHubConnectionConfig, options?: ClientOptions) {\n    if (!options) options = {};\n    this._context = ConnectionContext.create(config, options);\n  }\n\n  /**\n   * Closes the AMQP connection to the Event Hub for this client,\n   * returning a promise that will be resolved when disconnection is completed.\n   * @returns {Promise<void>} Promise<void>\n   */\n  async close(): Promise<void> {\n    try {\n      if (this._context.connection.isOpen()) {\n        // Close all the senders.\n        for (const senderName of Object.keys(this._context.senders)) {\n          await this._context.senders[senderName].close();\n        }\n        // Close all the receivers.\n        for (const receiverName of Object.keys(this._context.receivers)) {\n          await this._context.receivers[receiverName].close();\n        }\n        // Close the cbs session;\n        await this._context.cbsSession.close();\n        // Close the management session\n        await this._context.managementSession!.close();\n        await this._context.connection.close();\n        this._context.wasConnectionCloseCalled = true;\n        log.client(\"Closed the amqp connection '%s' on the client.\", this._context.connectionId);\n      }\n    } catch (err) {\n      const msg = `An error occurred while closing the connection \"${this._context.connectionId}\": ${JSON.stringify(err)}`;\n      log.error(msg);\n      throw new Error(msg);\n    }\n  }\n\n  /**\n   * Sends the given message to the EventHub.\n   *\n   * @param {any} data                    Message to send.  Will be sent as UTF8-encoded JSON string.\n   * @param {string|number} [partitionId] Partition ID to which the event data needs to be sent. This should only be specified\n   * if you intend to send the event to a specific partition. When not specified EventHub will store the messages in a round-robin\n   * fashion amongst the different partitions in the EventHub.\n   *\n   * @returns {Promise<Delivery>} Promise<Delivery>\n   */\n  async send(data: EventData, partitionId?: string | number): Promise<Delivery> {\n    const sender = EventHubSender.create(this._context, partitionId);\n    return sender.send(data);\n  }\n\n  /**\n   * Send a batch of EventData to the EventHub. The \"message_annotations\", \"application_properties\" and \"properties\"\n   * of the first message will be set as that of the envelope (batch message).\n   *\n   * @param {Array<EventData>} datas  An array of EventData objects to be sent in a Batch message.\n   * @param {string|number} [partitionId] Partition ID to which the event data needs to be sent. This should only be specified\n   * if you intend to send the event to a specific partition. When not specified EventHub will store the messages in a round-robin\n   * fashion amongst the different partitions in the EventHub.\n   *\n   * @return {Promise<Delivery>} Promise<Delivery>\n   */\n  async sendBatch(datas: EventData[], partitionId?: string | number): Promise<Delivery> {\n    const sender = EventHubSender.create(this._context, partitionId);\n    return sender.sendBatch(datas);\n  }\n\n  /**\n   * Starts the receiver by establishing an AMQP session and an AMQP receiver link on the session. Messages will be passed to\n   * the provided onMessage handler and error will be passed to the provided onError handler.\n   *\n   * @param {string|number} partitionId                        Partition ID from which to receive.\n   * @param {OnMessage} onMessage                              The message handler to receive event data objects.\n   * @param {OnError} onError                                  The error handler to receive an error that occurs\n   * while receiving messages.\n   * @param {ReceiveOptions} [options]                         Options for how you'd like to receive messages.\n   *\n   * @returns {ReceiveHandler} ReceiveHandler - An object that provides a mechanism to stop receiving more messages.\n   */\n  receive(\n    partitionId: string | number,\n    onMessage: OnMessage,\n    onError: OnError,\n    options?: ReceiveOptions\n  ): ReceiveHandler {\n    if (typeof partitionId !== \"string\" && typeof partitionId !== \"number\") {\n      throw new Error(\"'partitionId' is a required parameter and must be of type: 'string' | 'number'.\");\n    }\n    const sReceiver = StreamingReceiver.create(this._context, partitionId, options);\n    this._context.receivers[sReceiver.name] = sReceiver;\n    return sReceiver.receive(onMessage, onError);\n  }\n\n  /**\n   * Receives a batch of EventData objects from an EventHub partition for a given count and a given max wait time in seconds, whichever\n   * happens first. This method can be used directly after creating the receiver object and **MUST NOT** be used along with the `start()` method.\n   *\n   * @param {string|number} partitionId                        Partition ID from which to receive.\n   * @param {number} maxMessageCount                           The maximum message count. Must be a value greater than 0.\n   * @param {number} [maxWaitTimeInSeconds]                    The maximum wait time in seconds for which the Receiver should wait\n   * to receiver the said amount of messages. If not provided, it defaults to 60 seconds.\n   * @param {ReceiveOptions} [options]                         Options for how you'd like to receive messages.\n   *\n   * @returns {Promise<Array<EventData>>} Promise<Array<EventData>>.\n   */\n  async receiveBatch(\n    partitionId: string | number,\n    maxMessageCount: number,\n    maxWaitTimeInSeconds?: number,\n    options?: ReceiveOptions\n  ): Promise<EventData[]> {\n    if (typeof partitionId !== \"string\" && typeof partitionId !== \"number\") {\n      throw new Error(\"'partitionId' is a required parameter and must be of type: 'string' | 'number'.\");\n    }\n    const bReceiver = BatchingReceiver.create(this._context, partitionId, options);\n    this._context.receivers[bReceiver.name] = bReceiver;\n    let error: MessagingError | undefined;\n    let result: EventData[] = [];\n    try {\n      result = await bReceiver.receive(maxMessageCount, maxWaitTimeInSeconds);\n    } catch (err) {\n      error = err;\n      log.error(\n        \"[%s] Receiver '%s', an error occurred while receiving %d messages for %d max time:\\n %O\",\n        this._context.connectionId,\n        bReceiver.name,\n        maxMessageCount,\n        maxWaitTimeInSeconds,\n        err\n      );\n    }\n    try {\n      await bReceiver.close();\n    } catch (err) {\n      // do nothing about it.\n    }\n    if (error) {\n      throw error;\n    }\n    return result;\n  }\n\n  /**\n   * Provides the eventhub runtime information.\n   * @returns {Promise<EventHubRuntimeInformation>} A promise that resolves with EventHubRuntimeInformation.\n   */\n  async getHubRuntimeInformation(): Promise<EventHubRuntimeInformation> {\n    try {\n      return await this._context.managementSession!.getHubRuntimeInformation();\n    } catch (err) {\n      log.error(\"An error occurred while getting the hub runtime information: %O\", err);\n      throw err;\n    }\n  }\n\n  /**\n   * Provides an array of partitionIds.\n   * @returns {Promise<Array<string>>} A promise that resolves with an Array of strings.\n   */\n  async getPartitionIds(): Promise<Array<string>> {\n    try {\n      const runtimeInfo = await this.getHubRuntimeInformation();\n      return runtimeInfo.partitionIds;\n    } catch (err) {\n      log.error(\"An error occurred while getting the partition ids: %O\", err);\n      throw err;\n    }\n  }\n\n  /**\n   * Provides information about the specified partition.\n   * @param {(string|number)} partitionId Partition ID for which partition information is required.\n   * @returns {Promise<EventHubPartitionRuntimeInformation>} A promise that resoloves with EventHubPartitionRuntimeInformation.\n   */\n  async getPartitionInformation(partitionId: string | number): Promise<EventHubPartitionRuntimeInformation> {\n    if (typeof partitionId !== \"string\" && typeof partitionId !== \"number\") {\n      throw new Error(\"'partitionId' is a required parameter and must be of type: 'string' | 'number'.\");\n    }\n    try {\n      return await this._context.managementSession!.getPartitionInformation(partitionId);\n    } catch (err) {\n      log.error(\"An error occurred while getting the partition information: %O\", err);\n      throw err;\n    }\n  }\n\n  /**\n   * Creates an EventHub Client from connection string.\n   * @param {string} connectionString - Connection string of the form 'Endpoint=sb://my-servicebus-namespace.servicebus.windows.net/;SharedAccessKeyName=my-SA-name;SharedAccessKey=my-SA-key'\n   * @param {string} [path] - EventHub path of the form 'my-event-hub-name'\n   * @param {ClientOptions} [options] Options that can be provided during client creation.\n   * @returns {EventHubClient} - An instance of the eventhub client.\n   */\n  static createFromConnectionString(connectionString: string, path?: string, options?: ClientOptions): EventHubClient {\n    if (!connectionString || (connectionString && typeof connectionString !== \"string\")) {\n      throw new Error(\"'connectionString' is a required parameter and must be of type: 'string'.\");\n    }\n    const config = EventHubConnectionConfig.create(connectionString, path);\n\n    config.webSocket = options && options.webSocket;\n    config.webSocketEndpointPath = \"$servicebus/websocket\";\n    config.webSocketConstructorOptions = options && options.webSocketConstructorOptions;\n\n    if (!config.entityPath) {\n      throw new Error(\n        `Either the connectionString must have \"EntityPath=<path-to-entity>\" or ` +\n          `you must provide \"path\", while creating the client`\n      );\n    }\n    return new EventHubClient(config, options);\n  }\n\n  /**\n   * Creates an EventHub Client from connection string.\n   * @param {string} iothubConnectionString - Connection string of the form 'HostName=iot-host-name;SharedAccessKeyName=my-SA-name;SharedAccessKey=my-SA-key'\n   * @param {ClientOptions} [options] Options that can be provided during client creation.\n   * @returns {Promise<EventHubClient>} - Promise<EventHubClient>.\n   */\n  static async createFromIotHubConnectionString(\n    iothubConnectionString: string,\n    options?: ClientOptions\n  ): Promise<EventHubClient> {\n    if (!iothubConnectionString || (iothubConnectionString && typeof iothubConnectionString !== \"string\")) {\n      throw new Error(\"'connectionString' is a required parameter and must be of type: 'string'.\");\n    }\n    const connectionString = await new IotHubClient(iothubConnectionString).getEventHubConnectionString();\n    return EventHubClient.createFromConnectionString(connectionString, undefined, options);\n  }\n\n  /**\n   * Creates an EventHub Client from a generic token provider.\n   * @param {string} host - Fully qualified domain name for Event Hubs. Most likely,\n   * <yournamespace>.servicebus.windows.net\n   * @param {string} entityPath - EventHub path of the form 'my-event-hub-name'\n   * @param {TokenProvider} tokenProvider - Your token provider that implements the TokenProvider interface.\n   * @param {ClientOptionsBase} options - The options that can be provided during client creation.\n   * @returns {EventHubClient} An instance of the Eventhub client.\n   */\n  static createFromTokenProvider(\n    host: string,\n    entityPath: string,\n    tokenProvider: TokenProvider,\n    options?: ClientOptionsBase\n  ): EventHubClient {\n    if (!host || (host && typeof host !== \"string\")) {\n      throw new Error(\"'host' is a required parameter and must be of type: 'string'.\");\n    }\n\n    if (!entityPath || (entityPath && typeof entityPath !== \"string\")) {\n      throw new Error(\"'entityPath' is a required parameter and must be of type: 'string'.\");\n    }\n\n    if (!tokenProvider || (tokenProvider && typeof tokenProvider !== \"object\")) {\n      throw new Error(\"'tokenProvider' is a required parameter and must be of type: 'object'.\");\n    }\n    if (!host.endsWith(\"/\")) host += \"/\";\n    const connectionString =\n      `Endpoint=sb://${host};SharedAccessKeyName=defaultKeyName;` + `SharedAccessKey=defaultKeyValue`;\n    if (!options) options = {};\n    const clientOptions: ClientOptions = options;\n    clientOptions.tokenProvider = tokenProvider;\n    return EventHubClient.createFromConnectionString(connectionString, entityPath, clientOptions);\n  }\n\n  /**\n   * Creates an EventHub Client from AADTokenCredentials.\n   * @param {string} host - Fully qualified domain name for Event Hubs. Most likely,\n   * <yournamespace>.servicebus.windows.net\n   * @param {string} entityPath - EventHub path of the form 'my-event-hub-name'\n   * @param {TokenCredentials} credentials - The AAD Token credentials. It can be one of the following:\n   * ApplicationTokenCredentials | UserTokenCredentials | DeviceTokenCredentials | MSITokenCredentials.\n   * @param {ClientOptionsBase} options - The options that can be provided during client creation.\n   * @returns {EventHubClient} An instance of the Eventhub client.\n   */\n  static createFromAadTokenCredentials(\n    host: string,\n    entityPath: string,\n    credentials: ApplicationTokenCredentials | UserTokenCredentials | DeviceTokenCredentials | MSITokenCredentials,\n    options?: ClientOptionsBase\n  ): EventHubClient {\n    if (!credentials || (credentials && typeof credentials !== \"object\")) {\n      throw new Error(\n        \"'credentials' is a required parameter and must be an instance of \" +\n          \"ApplicationTokenCredentials | UserTokenCredentials | DeviceTokenCredentials | \" +\n          \"MSITokenCredentials.\"\n      );\n    }\n    const tokenProvider = new AadTokenProvider(credentials);\n    return EventHubClient.createFromTokenProvider(host, entityPath, tokenProvider, options);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nexport { EventData, EventHubDeliveryAnnotations, EventHubMessageAnnotations } from \"./eventData\";\nexport { Delivery, AmqpError, Message, MessageHeader, MessageProperties, Dictionary, WebSocketImpl } from \"rhea-promise\";\nexport { ReceiverRuntimeInfo, OnMessage, OnError } from \"./eventHubReceiver\";\nexport { ReceiveHandler } from \"./streamingReceiver\";\nexport { EventHubClient, ReceiveOptions, ClientOptionsBase, ClientOptions } from \"./eventHubClient\";\nexport { EventPosition } from \"./eventPosition\";\nexport { EventHubPartitionRuntimeInformation, EventHubRuntimeInformation } from \"./managementClient\";\nimport { Constants } from \"@azure/amqp-common\";\nexport const aadEventHubsAudience = Constants.aadEventHubsAudience;\nexport {\n  delay,\n  Timeout,\n  EventHubConnectionStringModel,\n  parseConnectionString,\n  IotHubConnectionStringModel,\n  StorageConnectionStringModel,\n  isIotHubConnectionString,\n  ErrorNameConditionMapper,\n  ConditionStatusMapper,\n  ConditionErrorNameMapper,\n  MessagingError,\n  DataTransformer,\n  DefaultDataTransformer,\n  TokenType,\n  TokenProvider,\n  TokenInfo,\n  AadTokenProvider,\n  SasTokenProvider,\n  ConnectionConfig,\n  EventHubConnectionConfig\n} from \"@azure/amqp-common\";\n"],"names":["Constants","messageProperties","messageHeader","EventData","bytesToUuid","uuid","log.link","defaultLock","log.error","link","translate","ErrorNameConditionMapper","log.receiver","RetryOperationType","retry","types","log.streaming","ReceiverEvents","log.mgmt","RequestResponseLink","SenderEvents","os.type","os.release","ConnectionContextBase","context","log.context","delay","error","ConnectionEvents","log.sender","message","randomNumberFromInterval","log.batching","SessionEvents","MessagingError","IotHubConnectionConfig","IotSasTokenProvider","log.iotClient","log.client","EventHubConnectionConfig","AadTokenProvider"],"mappings":"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"}